/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/app.js":(e,t,r)=>{"use strict";r.r(t);var n=r("./src/js/data/config.js"),a=r("./src/js/utils/detector.js"),o=r("./src/js/app/main3.js");r("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),n.default.isDev=!0,function(){if(a.default.webgl){var e=document.getElementById("appContainer");new o.default(e)}else a.default.addGetWebGLMessage()}()},"./src/js/app/components/camera.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/three/build/three.module.js"),a=r("./src/js/data/config.js");function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var o=t.domElement.width,i=t.domElement.height;this.threeCamera=new n.PerspectiveCamera(a.default.camera.fov,o/i,a.default.camera.near,a.default.camera.far),this.threeCamera.position.set(a.default.camera.posX,a.default.camera.posY,a.default.camera.posZ),this.updateSize(t),window.addEventListener("resize",(function(){return r.updateSize(t)}),!1)}var t,r,i;return t=e,(r=[{key:"updateSize",value:function(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()}}])&&o(t.prototype,r),i&&o(t,i),e}()},"./src/js/app/components/controls.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/three/build/three.module.js"),a=r("./src/js/utils/orbitControls.js"),o=r.n(a),i=r("./src/js/data/config.js");function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=new(o())(n);this.threeControls=new a(t,r),this.init()}var t,r,a;return t=e,(r=[{key:"init",value:function(){this.threeControls.target.set(i.default.controls.target.x,i.default.controls.target.y,i.default.controls.target.z),this.threeControls.autoRotate=i.default.controls.autoRotate,this.threeControls.autoRotateSpeed=i.default.controls.autoRotateSpeed,this.threeControls.rotateSpeed=i.default.controls.rotateSpeed,this.threeControls.zoomSpeed=i.default.controls.zoomSpeed,this.threeControls.minDistance=i.default.controls.minDistance,this.threeControls.maxDistance=i.default.controls.maxDistance,this.threeControls.minPolarAngle=i.default.controls.minPolarAngle,this.threeControls.maxPolarAngle=i.default.controls.maxPolarAngle,this.threeControls.enableDamping=i.default.controls.enableDamping,this.threeControls.enableZoom=i.default.controls.enableZoom,this.threeControls.dampingFactor=i.default.controls.dampingFactor}}])&&s(t.prototype,r),a&&s(t,a),e}()},"./src/js/app/components/geometry.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>c});var n=r("./node_modules/three/build/three.module.js"),a=r("./src/js/app/components/material.js"),o=r("./src/js/data/config.js");function i(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.geo=null}var t,r,s;return t=e,(r=[{key:"make",value:function(e){var t=this;return"plane"===e?function(e,r){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;t.geo=new n.PlaneGeometry(e,r,a,o)}:"sphere"===e?function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:32,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:32;t.geo=new n.SphereGeometry(e,r,a)}:void 0}},{key:"place",value:function(e,t){var r,s,l=new a.default(15658734).standard,c=new n.Mesh(this.geo,l);(r=c.position).set.apply(r,i(e)),(s=c.rotation).set.apply(s,i(t)),o.default.shadow.enabled&&(c.receiveShadow=!0),this.scene.add(c)}}])&&l(t.prototype,r),s&&l(t,s),e}()},"./src/js/app/components/light.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/three/build/three.module.js"),a=r("./src/js/data/config.js");function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.init()}var t,r,i;return t=e,(r=[{key:"init",value:function(){this.ambientLight=new n.AmbientLight(a.default.ambientLight.color),this.ambientLight.visible=a.default.ambientLight.enabled,this.pointLight=new n.PointLight(a.default.pointLight.color,a.default.pointLight.intensity,a.default.pointLight.distance),this.pointLight.position.set(a.default.pointLight.x,a.default.pointLight.y,a.default.pointLight.z),this.pointLight.visible=a.default.pointLight.enabled,this.directionalLight=new n.DirectionalLight(a.default.directionalLight.color,a.default.directionalLight.intensity),this.directionalLight.position.set(a.default.directionalLight.x,a.default.directionalLight.y,a.default.directionalLight.z),this.directionalLight.visible=a.default.directionalLight.enabled,this.directionalLight.castShadow=a.default.shadow.enabled,this.directionalLight.shadow.bias=a.default.shadow.bias,this.directionalLight.shadow.camera.near=a.default.shadow.near,this.directionalLight.shadow.camera.far=a.default.shadow.far,this.directionalLight.shadow.camera.left=a.default.shadow.left,this.directionalLight.shadow.camera.right=a.default.shadow.right,this.directionalLight.shadow.camera.top=a.default.shadow.top,this.directionalLight.shadow.camera.bottom=a.default.shadow.bottom,this.directionalLight.shadow.mapSize.width=a.default.shadow.mapWidth,this.directionalLight.shadow.mapSize.height=a.default.shadow.mapHeight,a.default.isDev&&(this.directionalLightHelper=new n.CameraHelper(this.directionalLight.shadow.camera),this.directionalLightHelper.visible=a.default.shadow.helperEnabled),this.hemiLight=new n.HemisphereLight(a.default.hemiLight.color,a.default.hemiLight.groundColor,a.default.hemiLight.intensity),this.hemiLight.position.set(a.default.hemiLight.x,a.default.hemiLight.y,a.default.hemiLight.z),this.hemiLight.visible=a.default.hemiLight.enabled}},{key:"place",value:function(e){switch(e){case"ambient":this.scene.add(this.ambientLight);break;case"directional":this.scene.add(this.directionalLight),a.default.isDev&&this.scene.add(this.directionalLightHelper);break;case"point":this.scene.add(this.pointLight);break;case"hemi":this.scene.add(this.hemiLight)}}}])&&o(t.prototype,r),i&&o(t,i),e}()},"./src/js/app/components/material.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/three/build/three.module.js");var a=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.basic=new n.MeshBasicMaterial({color:t,side:n.DoubleSide}),this.standard=new n.MeshStandardMaterial({color:t,shading:n.FlatShading,roughness:1,metalness:0,side:n.DoubleSide}),this.wire=new n.MeshBasicMaterial({wireframe:!0})}},"./src/js/app/components/renderer.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/three/build/three.module.js"),a=r("./src/js/data/config.js");function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(t,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.container=r,this.threeRenderer=new n.WebGLRenderer({antialias:!0}),this.threeRenderer.setClearColor(t.fog.color),this.threeRenderer.setPixelRatio(window.devicePixelRatio),r.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=n.PCFSoftShadowMap,a.default.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(function(){return o.updateSize()}),!1),window.addEventListener("resize",(function(){return o.updateSize()}),!1)}var t,r,i;return t=e,(r=[{key:"updateSize",value:function(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight)}},{key:"render",value:function(e,t){this.threeRenderer.render(e,t)}}])&&o(t.prototype,r),i&&o(t,i),e}()},"./src/js/app/helpers/meshHelper.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/three/build/three.module.js"),a=r("./src/js/app/helpers/vertexNormalsHelper.js");function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.mesh=r,this.scene=t;var o=new n.WireframeGeometry(this.mesh.geometry);this.wireLine=new n.LineSegments(o),this.wireLine.material.depthTest=!1,this.wireLine.material.opacity=.25,this.wireLine.material.transparent=!0;var i=new n.EdgesGeometry(this.mesh.geometry);this.edgesLine=new n.LineSegments(i),this.edgesLine.material.depthTest=!1,this.edgesLine.material.opacity=.25,this.edgesLine.material.transparent=!0,this.vertexHelper=new a.VertexNormalsHelper(this.mesh,2),this.boxHelper=new n.BoxHelper(this.mesh)}var t,r,i;return t=e,(r=[{key:"enable",value:function(){this.mesh.add(this.wireLine),this.mesh.add(this.edgesLine),this.scene.add(this.vertexHelper),this.scene.add(this.boxHelper)}},{key:"disable",value:function(){this.mesh.remove(this.wireLine),this.mesh.remove(this.edgesLine),this.scene.remove(this.vertexHelper),this.scene.remove(this.boxHelper)}}])&&o(t.prototype,r),i&&o(t,i),e}()},"./src/js/app/helpers/stats.js":(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var a,o,i,s;r.r(t),r.d(t,{default:()=>l});var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t}var t,r,l;return t=e,l=[{key:"start",value:function(){a("frame").start(),i.start(),a("rAF").tick(),a("FPS").frame(),a("render").start()}},{key:"end",value:function(){a("render").end(),a("frame").end(),a("rStats").start(),a().update(),a("rStats").end()}}],(r=[{key:"setUp",value:function(){o=new BrowserStats,i=new glStats,s=new threeStats(this.renderer.threeRenderer),a=new rStats({CSSPath:"./css/",userTimingAPI:!0,values:{frame:{caption:"Total frame time (ms)",over:16,average:!0,avgMs:100},fps:{caption:"Framerate (FPS)",below:30},calls:{caption:"Calls (three.js)",over:3e3},raf:{caption:"Time since last rAF (ms)",average:!0,avgMs:100},rstats:{caption:"rStats update (ms)",average:!0,avgMs:100},texture:{caption:"GenTex",average:!0,avgMs:100}},groups:[{caption:"Framerate",values:["fps","raf"]},{caption:"Frame Budget",values:["frame","texture","setup","render"]}],fractions:[{base:"frame",steps:["texture","setup","render"]}],plugins:[o,s]})}}])&&n(t.prototype,r),l&&n(t,l),e}()},"./src/js/app/helpers/vertexNormalsHelper.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{VertexNormalsHelper:()=>l});var n=r("./node_modules/three/build/three.module.js"),a=new n.Vector3,o=new n.Vector3,i=new n.Matrix3,s=["a","b","c"];function l(e,t,r){this.object=e,this.size=void 0!==t?t:.1;var a=void 0!==r?r:16711680,o=0,i=this.object.geometry;i&&i.isGeometry?o=3*i.faces.length:i&&i.isBufferGeometry&&(o=i.attributes.normal.count);var s=new n.BufferGeometry,l=new n.Float32BufferAttribute(2*o*3,3);s.setAttribute("position",l),n.LineSegments.call(this,s,new n.LineBasicMaterial({color:a,toneMapped:!1})),this.type="VertexNormalsHelper",this.matrixAutoUpdate=!1,this.update()}l.prototype=Object.create(n.LineSegments.prototype),l.prototype.constructor=l,l.prototype.update=function(){var e;this.object.updateMatrixWorld(!0),i.getNormalMatrix(this.object.matrixWorld);var t=this.object.matrixWorld,r=this.geometry.attributes.position,n=this.object.geometry;if(n&&n.isGeometry){var l=n.vertices,c=n.faces;e=0;for(var u=0,h=c.length;u<h;u++)for(var d=c[u],p=0,m=d.vertexNormals.length;p<m;p++){var f=l[d[s[p]]],g=d.vertexNormals[p];a.copy(f).applyMatrix4(t),o.copy(g).applyMatrix3(i).normalize().multiplyScalar(this.size).add(a),r.setXYZ(e,a.x,a.y,a.z),e+=1,r.setXYZ(e,o.x,o.y,o.z),e+=1}}else if(n&&n.isBufferGeometry){var v=n.attributes.position,b=n.attributes.normal;e=0;for(var y=0,w=v.count;y<w;y++)a.set(v.getX(y),v.getY(y),v.getZ(y)).applyMatrix4(t),o.set(b.getX(y),b.getY(y),b.getZ(y)),o.applyMatrix3(i).normalize().multiplyScalar(this.size).add(a),r.setXYZ(e,a.x,a.y,a.z),e+=1,r.setXYZ(e,o.x,o.y,o.z),e+=1}r.needsUpdate=!0}},"./src/js/app/loaders/GLTFLoader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{GLTFLoader:()=>o});var n=r("./node_modules/three/build/three.module.js");function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=function(){function e(e){n.Loader.call(this,e),this.dracoLoader=null,this.ddsLoader=null}function t(){var e={};return{get:function(t){return e[t]},add:function(t,r){e[t]=r},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(n.Loader.prototype),{constructor:e,load:function(e,t,r,a){var o,i=this;o=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:n.LoaderUtils.extractUrlBase(e),i.manager.itemStart(e);var s=function(t){a?a(t):console.error(t),i.manager.itemError(e),i.manager.itemEnd(e)},l=new n.FileLoader(i.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),"use-credentials"===i.crossOrigin&&l.setWithCredentials(!0),l.load(e,(function(r){try{i.parse(r,o,(function(r){t(r),i.manager.itemEnd(e)}),s)}catch(e){s(e)}}),r,s)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,t,a,u){var h,f={};if("string"==typeof e)h=e;else if(n.LoaderUtils.decodeText(new Uint8Array(e,0,4))===c){try{f[r.KHR_BINARY_GLTF]=new d(e)}catch(e){return void(u&&u(e))}h=f[r.KHR_BINARY_GLTF].content}else h=n.LoaderUtils.decodeText(new Uint8Array(e));var b=JSON.parse(h);if(void 0===b.asset||b.asset.version[0]<2)u&&u(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));else{if(b.extensionsUsed)for(var y=0;y<b.extensionsUsed.length;++y){var w=b.extensionsUsed[y],L=b.extensionsRequired||[];switch(w){case r.KHR_LIGHTS_PUNCTUAL:f[w]=new i(b);break;case r.KHR_MATERIALS_CLEARCOAT:f[w]=new l;break;case r.KHR_MATERIALS_UNLIT:f[w]=new s;break;case r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:f[w]=new g;break;case r.KHR_DRACO_MESH_COMPRESSION:f[w]=new p(b,this.dracoLoader);break;case r.MSFT_TEXTURE_DDS:f[w]=new o(this.ddsLoader);break;case r.KHR_TEXTURE_TRANSFORM:f[w]=new m;break;case r.KHR_MESH_QUANTIZATION:f[w]=new v;break;default:L.indexOf(w)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+w+'".')}}new N(b,f,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(a,u)}}});var r={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function o(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=r.MSFT_TEXTURE_DDS,this.ddsLoader=e}function i(e){this.name=r.KHR_LIGHTS_PUNCTUAL;var t=e.extensions&&e.extensions[r.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=t.lights||[]}function s(){this.name=r.KHR_MATERIALS_UNLIT}function l(){this.name=r.KHR_MATERIALS_CLEARCOAT}i.prototype.loadLight=function(e){var t,r=this.lightDefs[e],a=new n.Color(16777215);void 0!==r.color&&a.fromArray(r.color);var o=void 0!==r.range?r.range:0;switch(r.type){case"directional":(t=new n.DirectionalLight(a)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new n.PointLight(a)).distance=o;break;case"spot":(t=new n.SpotLight(a)).distance=o,r.spot=r.spot||{},r.spot.innerConeAngle=void 0!==r.spot.innerConeAngle?r.spot.innerConeAngle:0,r.spot.outerConeAngle=void 0!==r.spot.outerConeAngle?r.spot.outerConeAngle:Math.PI/4,t.angle=r.spot.outerConeAngle,t.penumbra=1-r.spot.innerConeAngle/r.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+r.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==r.intensity&&(t.intensity=r.intensity),t.name=r.name||"light_"+e,Promise.resolve(t)},s.prototype.getMaterialType=function(){return n.MeshBasicMaterial},s.prototype.extendParams=function(e,t,r){var a=[];e.color=new n.Color(1,1,1),e.opacity=1;var o=t.pbrMetallicRoughness;if(o){if(Array.isArray(o.baseColorFactor)){var i=o.baseColorFactor;e.color.fromArray(i),e.opacity=i[3]}void 0!==o.baseColorTexture&&a.push(r.assignTexture(e,"map",o.baseColorTexture))}return Promise.all(a)},l.prototype.getMaterialType=function(){return n.MeshPhysicalMaterial},l.prototype.extendParams=function(e,t,r){var a=[],o=t.extensions[this.name];if(void 0!==o.clearcoatFactor&&(e.clearcoat=o.clearcoatFactor),void 0!==o.clearcoatTexture&&a.push(r.assignTexture(e,"clearcoatMap",o.clearcoatTexture)),void 0!==o.clearcoatRoughnessFactor&&(e.clearcoatRoughness=o.clearcoatRoughnessFactor),void 0!==o.clearcoatRoughnessTexture&&a.push(r.assignTexture(e,"clearcoatRoughnessMap",o.clearcoatRoughnessTexture)),void 0!==o.clearcoatNormalTexture&&(a.push(r.assignTexture(e,"clearcoatNormalMap",o.clearcoatNormalTexture)),void 0!==o.clearcoatNormalTexture.scale)){var i=o.clearcoatNormalTexture.scale;e.clearcoatNormalScale=new n.Vector2(i,i)}return Promise.all(a)};var c="glTF",u=1313821514,h=5130562;function d(e){this.name=r.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,12);if(this.header={magic:n.LoaderUtils.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==c)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");for(var a=new DataView(e,12),o=0;o<a.byteLength;){var i=a.getUint32(o,!0);o+=4;var s=a.getUint32(o,!0);if(o+=4,s===u){var l=new Uint8Array(e,12+o,i);this.content=n.LoaderUtils.decodeText(l)}else if(s===h){var d=12+o;this.body=e.slice(d,d+i)}o+=i}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function p(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=r.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}function m(){this.name=r.KHR_TEXTURE_TRANSFORM}function f(e){n.MeshStandardMaterial.call(this),this.isGLTFSpecularGlossinessMaterial=!0;var t=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),r=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),a=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),o=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),i=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );","float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );","material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.","material.specularRoughness += geometryRoughness;","material.specularRoughness = min( material.specularRoughness, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),s={specular:{value:(new n.Color).setHex(16777215)},glossiness:{value:1},specularMap:{value:null},glossinessMap:{value:null}};this._extraUniforms=s,this.onBeforeCompile=function(e){for(var n in s)e.uniforms[n]=s[n];e.fragmentShader=e.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;"),e.fragmentShader=e.fragmentShader.replace("uniform float metalness;","uniform float glossiness;"),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_pars_fragment>",t),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_pars_fragment>",r),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_fragment>",a),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_fragment>",o),e.fragmentShader=e.fragmentShader.replace("#include <lights_physical_fragment>",i)},Object.defineProperties(this,{specular:{get:function(){return s.specular.value},set:function(e){s.specular.value=e}},specularMap:{get:function(){return s.specularMap.value},set:function(e){s.specularMap.value=e}},glossiness:{get:function(){return s.glossiness.value},set:function(e){s.glossiness.value=e}},glossinessMap:{get:function(){return s.glossinessMap.value},set:function(e){s.glossinessMap.value=e,e?(this.defines.USE_GLOSSINESSMAP="",this.defines.USE_ROUGHNESSMAP=""):(delete this.defines.USE_ROUGHNESSMAP,delete this.defines.USE_GLOSSINESSMAP)}}}),delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this.setValues(e)}function g(){return{name:r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return f},extendParams:function(e,t,r){var a=t.extensions[this.name];e.color=new n.Color(1,1,1),e.opacity=1;var o=[];if(Array.isArray(a.diffuseFactor)){var i=a.diffuseFactor;e.color.fromArray(i),e.opacity=i[3]}if(void 0!==a.diffuseTexture&&o.push(r.assignTexture(e,"map",a.diffuseTexture)),e.emissive=new n.Color(0,0,0),e.glossiness=void 0!==a.glossinessFactor?a.glossinessFactor:1,e.specular=new n.Color(1,1,1),Array.isArray(a.specularFactor)&&e.specular.fromArray(a.specularFactor),void 0!==a.specularGlossinessTexture){var s=a.specularGlossinessTexture;o.push(r.assignTexture(e,"glossinessMap",s)),o.push(r.assignTexture(e,"specularMap",s))}return Promise.all(o)},createMaterial:function(e){var t=new f(e);return t.fog=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,t.normalMapType=n.TangentSpaceNormalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t}}}function v(){this.name=r.KHR_MESH_QUANTIZATION}function b(e,t,r,a){n.Interpolant.call(this,e,t,r,a)}p.prototype.decodePrimitive=function(e,t){var r=this.json,n=this.dracoLoader,a=e.extensions[this.name].bufferView,o=e.extensions[this.name].attributes,i={},s={},l={};for(var c in o){var u=C[c]||c.toLowerCase();i[u]=o[c]}for(c in e.attributes){u=C[c]||c.toLowerCase();if(void 0!==o[c]){var h=r.accessors[e.attributes[c]],d=S[h.componentType];l[u]=d,s[u]=!0===h.normalized}}return t.getDependency("bufferView",a).then((function(e){return new Promise((function(t){n.decodeDracoFile(e,(function(e){for(var r in e.attributes){var n=e.attributes[r],a=s[r];void 0!==a&&(n.normalized=a)}t(e)}),i,l)}))}))},m.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},f.prototype=Object.create(n.MeshStandardMaterial.prototype),f.prototype.constructor=f,f.prototype.copy=function(e){return n.MeshStandardMaterial.prototype.copy.call(this,e),this.specularMap=e.specularMap,this.specular.copy(e.specular),this.glossinessMap=e.glossinessMap,this.glossiness=e.glossiness,delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this},b.prototype=Object.create(n.Interpolant.prototype),b.prototype.constructor=b,b.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,r=this.sampleValues,n=this.valueSize,a=e*n*3+n,o=0;o!==n;o++)t[o]=r[a+o];return t},b.prototype.beforeStart_=b.prototype.copySampleValue_,b.prototype.afterEnd_=b.prototype.copySampleValue_,b.prototype.interpolate_=function(e,t,r,n){for(var a=this.resultBuffer,o=this.sampleValues,i=this.valueSize,s=2*i,l=3*i,c=n-t,u=(r-t)/c,h=u*u,d=h*u,p=e*l,m=p-l,f=-2*d+3*h,g=d-h,v=1-f,b=g-h+u,y=0;y!==i;y++){var w=o[m+y+i],L=o[m+y+s]*c,x=o[p+y+i],M=o[p+y]*c;a[y]=v*w+b*L+f*x+g*M}return a};var y=0,w=1,L=2,x=3,M=4,E=5,T=6,S={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},R={9728:n.NearestFilter,9729:n.LinearFilter,9984:n.NearestMipmapNearestFilter,9985:n.LinearMipmapNearestFilter,9986:n.NearestMipmapLinearFilter,9987:n.LinearMipmapLinearFilter},j={33071:n.ClampToEdgeWrapping,33648:n.MirroredRepeatWrapping,10497:n.RepeatWrapping},A={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},C={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},P={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},F={CUBICSPLINE:void 0,LINEAR:n.InterpolateLinear,STEP:n.InterpolateDiscrete},_="OPAQUE",O="MASK",k="BLEND",I={"image/png":n.RGBAFormat,"image/jpeg":n.RGBFormat};function U(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function H(e,t,r){for(var n in r.extensions)void 0===e[n]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[n]=r.extensions[n])}function D(e,t){void 0!==t.extras&&("object"===a(t.extras)?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function G(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var r=0,n=t.weights.length;r<n;r++)e.morphTargetInfluences[r]=t.weights[r];if(t.extras&&Array.isArray(t.extras.targetNames)){var a=t.extras.targetNames;if(e.morphTargetInfluences.length===a.length){e.morphTargetDictionary={};for(r=0,n=a.length;r<n;r++)e.morphTargetDictionary[a[r]]=r}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function B(e){for(var t="",r=Object.keys(e).sort(),n=0,a=r.length;n<a;n++)t+=r[n]+":"+e[r[n]]+";";return t}function N(e,r,a){this.json=e||{},this.extensions=r||{},this.options=a||{},this.cache=new t,this.primitiveCache={},this.textureLoader=new n.TextureLoader(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new n.FileLoader(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function z(e,t,r){var a=t.attributes,o=[];function i(t,n){return r.getDependency("accessor",t).then((function(t){e.setAttribute(n,t)}))}for(var s in a){var l=C[s]||s.toLowerCase();l in e.attributes||o.push(i(a[s],l))}if(void 0!==t.indices&&!e.index){var c=r.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));o.push(c)}return D(e,t),function(e,t,r){var a=t.attributes,o=new n.Box3;if(void 0!==a.POSITION){var i=(p=r.json.accessors[a.POSITION]).min,s=p.max;if(void 0!==i&&void 0!==s){o.set(new n.Vector3(i[0],i[1],i[2]),new n.Vector3(s[0],s[1],s[2]));var l=t.targets;if(void 0!==l){for(var c=new n.Vector3,u=new n.Vector3,h=0,d=l.length;h<d;h++){var p,m=l[h];if(void 0!==m.POSITION)i=(p=r.json.accessors[m.POSITION]).min,s=p.max,void 0!==i&&void 0!==s?(u.setX(Math.max(Math.abs(i[0]),Math.abs(s[0]))),u.setY(Math.max(Math.abs(i[1]),Math.abs(s[1]))),u.setZ(Math.max(Math.abs(i[2]),Math.abs(s[2]))),c.max(u)):console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}o.expandByVector(c)}e.boundingBox=o;var f=new n.Sphere;o.getCenter(f.center),f.radius=o.min.distanceTo(o.max)/2,e.boundingSphere=f}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}(e,t,r),Promise.all(o).then((function(){return void 0!==t.targets?function(e,t,r){for(var n=!1,a=!1,o=0,i=t.length;o<i&&(void 0!==(c=t[o]).POSITION&&(n=!0),void 0!==c.NORMAL&&(a=!0),!n||!a);o++);if(!n&&!a)return Promise.resolve(e);var s=[],l=[];for(o=0,i=t.length;o<i;o++){var c=t[o];if(n){var u=void 0!==c.POSITION?r.getDependency("accessor",c.POSITION):e.attributes.position;s.push(u)}a&&(u=void 0!==c.NORMAL?r.getDependency("accessor",c.NORMAL):e.attributes.normal,l.push(u))}return Promise.all([Promise.all(s),Promise.all(l)]).then((function(t){var r=t[0],o=t[1];return n&&(e.morphAttributes.position=r),a&&(e.morphAttributes.normal=o),e.morphTargetsRelative=!0,e}))}(e,t.targets,r):e}))}function V(e,t){var r=e.getIndex();if(null===r){var a=[],o=e.getAttribute("position");if(void 0===o)return console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<o.count;i++)a.push(i);e.setIndex(a),r=e.getIndex()}var s=r.count-2,l=[];if(t===n.TriangleFanDrawMode)for(i=1;i<=s;i++)l.push(r.getX(0)),l.push(r.getX(i)),l.push(r.getX(i+1));else for(i=0;i<s;i++)i%2==0?(l.push(r.getX(i)),l.push(r.getX(i+1)),l.push(r.getX(i+2))):(l.push(r.getX(i+2)),l.push(r.getX(i+1)),l.push(r.getX(i)));l.length/3!==s&&console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var c=e.clone();return c.setIndex(l),c}return N.prototype.parse=function(e,t){var r=this,n=this.json,a=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var o={scene:t[0][n.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:n.asset,parser:r,userData:{}};H(a,o,n),D(o,n),e(o)})).catch(t)},N.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],r=this.json.meshes||[],n={},a={},o=0,i=t.length;o<i;o++)for(var s=t[o].joints,l=0,c=s.length;l<c;l++)e[s[l]].isBone=!0;for(var u=0,h=e.length;u<h;u++){var d=e[u];void 0!==d.mesh&&(void 0===n[d.mesh]&&(n[d.mesh]=a[d.mesh]=0),n[d.mesh]++,void 0!==d.skin&&(r[d.mesh].isSkinnedMesh=!0))}this.json.meshReferences=n,this.json.meshUses=a},N.prototype.getDependency=function(e,t){var n=e+":"+t,a=this.cache.get(n);if(!a){switch(e){case"scene":a=this.loadScene(t);break;case"node":a=this.loadNode(t);break;case"mesh":a=this.loadMesh(t);break;case"accessor":a=this.loadAccessor(t);break;case"bufferView":a=this.loadBufferView(t);break;case"buffer":a=this.loadBuffer(t);break;case"material":a=this.loadMaterial(t);break;case"texture":a=this.loadTexture(t);break;case"skin":a=this.loadSkin(t);break;case"animation":a=this.loadAnimation(t);break;case"camera":a=this.loadCamera(t);break;case"light":a=this.extensions[r.KHR_LIGHTS_PUNCTUAL].loadLight(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(n,a)}return a},N.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var r=this,n=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(n.map((function(t,n){return r.getDependency(e,n)}))),this.cache.add(e,t)}return t},N.prototype.loadBuffer=function(e){var t=this.json.buffers[e],n=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[r.KHR_BINARY_GLTF].body);var a=this.options;return new Promise((function(e,r){n.load(U(t.uri,a.path),e,void 0,(function(){r(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},N.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var r=t.byteLength||0,n=t.byteOffset||0;return e.slice(n,n+r)}))},N.prototype.loadAccessor=function(e){var t=this,r=this.json,a=this.json.accessors[e];if(void 0===a.bufferView&&void 0===a.sparse)return Promise.resolve(null);var o=[];return void 0!==a.bufferView?o.push(this.getDependency("bufferView",a.bufferView)):o.push(null),void 0!==a.sparse&&(o.push(this.getDependency("bufferView",a.sparse.indices.bufferView)),o.push(this.getDependency("bufferView",a.sparse.values.bufferView))),Promise.all(o).then((function(e){var o,i,s=e[0],l=A[a.type],c=S[a.componentType],u=c.BYTES_PER_ELEMENT,h=u*l,d=a.byteOffset||0,p=void 0!==a.bufferView?r.bufferViews[a.bufferView].byteStride:void 0,m=!0===a.normalized;if(p&&p!==h){var f=Math.floor(d/p),g="InterleavedBuffer:"+a.bufferView+":"+a.componentType+":"+f+":"+a.count,v=t.cache.get(g);v||(o=new c(s,f*p,a.count*p/u),v=new n.InterleavedBuffer(o,p/u),t.cache.add(g,v)),i=new n.InterleavedBufferAttribute(v,l,d%p/u,m)}else o=null===s?new c(a.count*l):new c(s,d,a.count*l),i=new n.BufferAttribute(o,l,m);if(void 0!==a.sparse){var b=A.SCALAR,y=S[a.sparse.indices.componentType],w=a.sparse.indices.byteOffset||0,L=a.sparse.values.byteOffset||0,x=new y(e[1],w,a.sparse.count*b),M=new c(e[2],L,a.sparse.count*l);null!==s&&(i=new n.BufferAttribute(i.array.slice(),i.itemSize,i.normalized));for(var E=0,T=x.length;E<T;E++){var R=x[E];if(i.setX(R,M[E*l]),l>=2&&i.setY(R,M[E*l+1]),l>=3&&i.setZ(R,M[E*l+2]),l>=4&&i.setW(R,M[E*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return i}))},N.prototype.loadTexture=function(e){var t,a=this,o=this.json,i=this.options,s=this.textureLoader,l=self.URL||self.webkitURL,c=o.textures[e],u=c.extensions||{},h=(t=u[r.MSFT_TEXTURE_DDS]?o.images[u[r.MSFT_TEXTURE_DDS].source]:o.images[c.source]).uri,d=!1;return void 0!==t.bufferView&&(h=a.getDependency("bufferView",t.bufferView).then((function(e){d=!0;var r=new Blob([e],{type:t.mimeType});return h=l.createObjectURL(r)}))),Promise.resolve(h).then((function(e){var t=i.manager.getHandler(e);return t||(t=u[r.MSFT_TEXTURE_DDS]?a.extensions[r.MSFT_TEXTURE_DDS].ddsLoader:s),new Promise((function(r,n){t.load(U(e,i.path),r,void 0,n)}))})).then((function(e){!0===d&&l.revokeObjectURL(h),e.flipY=!1,c.name&&(e.name=c.name),t.mimeType in I&&(e.format=I[t.mimeType]);var r=(o.samplers||{})[c.sampler]||{};return e.magFilter=R[r.magFilter]||n.LinearFilter,e.minFilter=R[r.minFilter]||n.LinearMipmapLinearFilter,e.wrapS=j[r.wrapS]||n.RepeatWrapping,e.wrapT=j[r.wrapT]||n.RepeatWrapping,e}))},N.prototype.assignTexture=function(e,t,a){var o=this;return this.getDependency("texture",a.index).then((function(i){if(!i.isCompressedTexture)switch(t){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":i.format=n.RGBFormat}if(void 0===a.texCoord||0==a.texCoord||"aoMap"===t&&1==a.texCoord||console.warn("THREE.GLTFLoader: Custom UV set "+a.texCoord+" for texture "+t+" not yet supported."),o.extensions[r.KHR_TEXTURE_TRANSFORM]){var s=void 0!==a.extensions?a.extensions[r.KHR_TEXTURE_TRANSFORM]:void 0;s&&(i=o.extensions[r.KHR_TEXTURE_TRANSFORM].extendTexture(i,s))}e[t]=i}))},N.prototype.assignFinalMaterial=function(e){var t=e.geometry,r=e.material,a=void 0!==t.attributes.tangent,o=void 0!==t.attributes.color,i=void 0===t.attributes.normal,s=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,c=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var u="PointsMaterial:"+r.uuid,h=this.cache.get(u);h||(h=new n.PointsMaterial,n.Material.prototype.copy.call(h,r),h.color.copy(r.color),h.map=r.map,h.sizeAttenuation=!1,this.cache.add(u,h)),r=h}else if(e.isLine){u="LineBasicMaterial:"+r.uuid;var d=this.cache.get(u);d||(d=new n.LineBasicMaterial,n.Material.prototype.copy.call(d,r),d.color.copy(r.color),this.cache.add(u,d)),r=d}if(a||o||i||s||l){u="ClonedMaterial:"+r.uuid+":";r.isGLTFSpecularGlossinessMaterial&&(u+="specular-glossiness:"),s&&(u+="skinning:"),a&&(u+="vertex-tangents:"),o&&(u+="vertex-colors:"),i&&(u+="flat-shading:"),l&&(u+="morph-targets:"),c&&(u+="morph-normals:");var p=this.cache.get(u);p||(p=r.clone(),s&&(p.skinning=!0),a&&(p.vertexTangents=!0),o&&(p.vertexColors=!0),i&&(p.flatShading=!0),l&&(p.morphTargets=!0),c&&(p.morphNormals=!0),this.cache.add(u,p)),r=p}r.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&t.setAttribute("uv2",t.attributes.uv),r.normalScale&&!a&&(r.normalScale.y=-r.normalScale.y),r.clearcoatNormalScale&&!a&&(r.clearcoatNormalScale.y=-r.clearcoatNormalScale.y),e.material=r},N.prototype.loadMaterial=function(e){var t,a=this,o=this.json,i=this.extensions,s=o.materials[e],l={},c=s.extensions||{},u=[];if(c[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var h=i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=h.getMaterialType(),u.push(h.extendParams(l,s,a))}else if(c[r.KHR_MATERIALS_UNLIT]){var d=i[r.KHR_MATERIALS_UNLIT];t=d.getMaterialType(),u.push(d.extendParams(l,s,a))}else{t=n.MeshStandardMaterial;var p=s.pbrMetallicRoughness||{};if(l.color=new n.Color(1,1,1),l.opacity=1,Array.isArray(p.baseColorFactor)){var m=p.baseColorFactor;l.color.fromArray(m),l.opacity=m[3]}void 0!==p.baseColorTexture&&u.push(a.assignTexture(l,"map",p.baseColorTexture)),l.metalness=void 0!==p.metallicFactor?p.metallicFactor:1,l.roughness=void 0!==p.roughnessFactor?p.roughnessFactor:1,void 0!==p.metallicRoughnessTexture&&(u.push(a.assignTexture(l,"metalnessMap",p.metallicRoughnessTexture)),u.push(a.assignTexture(l,"roughnessMap",p.metallicRoughnessTexture)))}!0===s.doubleSided&&(l.side=n.DoubleSide);var g=s.alphaMode||_;if(g===k?(l.transparent=!0,l.depthWrite=!1):(l.transparent=!1,g===O&&(l.alphaTest=void 0!==s.alphaCutoff?s.alphaCutoff:.5)),void 0!==s.normalTexture&&t!==n.MeshBasicMaterial&&(u.push(a.assignTexture(l,"normalMap",s.normalTexture)),l.normalScale=new n.Vector2(1,1),void 0!==s.normalTexture.scale&&l.normalScale.set(s.normalTexture.scale,s.normalTexture.scale)),void 0!==s.occlusionTexture&&t!==n.MeshBasicMaterial&&(u.push(a.assignTexture(l,"aoMap",s.occlusionTexture)),void 0!==s.occlusionTexture.strength&&(l.aoMapIntensity=s.occlusionTexture.strength)),void 0!==s.emissiveFactor&&t!==n.MeshBasicMaterial&&(l.emissive=(new n.Color).fromArray(s.emissiveFactor)),void 0!==s.emissiveTexture&&t!==n.MeshBasicMaterial&&u.push(a.assignTexture(l,"emissiveMap",s.emissiveTexture)),c[r.KHR_MATERIALS_CLEARCOAT]){var v=i[r.KHR_MATERIALS_CLEARCOAT];t=v.getMaterialType(),u.push(v.extendParams(l,{extensions:c},a))}return Promise.all(u).then((function(){var e;return e=t===f?i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(l):new t(l),s.name&&(e.name=s.name),e.map&&(e.map.encoding=n.sRGBEncoding),e.emissiveMap&&(e.emissiveMap.encoding=n.sRGBEncoding),D(e,s),s.extensions&&H(i,e,s),e}))},N.prototype.loadGeometries=function(e){var t=this,a=this.extensions,o=this.primitiveCache;function i(e){return a[r.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(r){return z(r,e,t)}))}for(var s,l,c=[],u=0,h=e.length;u<h;u++){var d,p=e[u],m=(l=void 0,(l=(s=p).extensions&&s.extensions[r.KHR_DRACO_MESH_COMPRESSION])?"draco:"+l.bufferView+":"+l.indices+":"+B(l.attributes):s.indices+":"+B(s.attributes)+":"+s.mode),f=o[m];if(f)c.push(f.promise);else d=p.extensions&&p.extensions[r.KHR_DRACO_MESH_COMPRESSION]?i(p):z(new n.BufferGeometry,p,t),o[m]={primitive:p,promise:d},c.push(d)}return Promise.all(c)},N.prototype.loadMesh=function(e){for(var t,r=this,a=this.json.meshes[e],o=a.primitives,i=[],s=0,l=o.length;s<l;s++){var c=void 0===o[s].material?(void 0===(t=this.cache).DefaultMaterial&&(t.DefaultMaterial=new n.MeshStandardMaterial({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:n.FrontSide})),t.DefaultMaterial):this.getDependency("material",o[s].material);i.push(c)}return i.push(r.loadGeometries(o)),Promise.all(i).then((function(t){for(var i=t.slice(0,t.length-1),s=t[t.length-1],l=[],c=0,u=s.length;c<u;c++){var h,d=s[c],p=o[c],m=i[c];if(p.mode===M||p.mode===E||p.mode===T||void 0===p.mode)!0!==(h=!0===a.isSkinnedMesh?new n.SkinnedMesh(d,m):new n.Mesh(d,m)).isSkinnedMesh||h.geometry.attributes.skinWeight.normalized||h.normalizeSkinWeights(),p.mode===E?h.geometry=V(h.geometry,n.TriangleStripDrawMode):p.mode===T&&(h.geometry=V(h.geometry,n.TriangleFanDrawMode));else if(p.mode===w)h=new n.LineSegments(d,m);else if(p.mode===x)h=new n.Line(d,m);else if(p.mode===L)h=new n.LineLoop(d,m);else{if(p.mode!==y)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+p.mode);h=new n.Points(d,m)}Object.keys(h.geometry.morphAttributes).length>0&&G(h,a),h.name=a.name||"mesh_"+e,s.length>1&&(h.name+="_"+c),D(h,a),r.assignFinalMaterial(h),l.push(h)}if(1===l.length)return l[0];var f=new n.Group;for(c=0,u=l.length;c<u;c++)f.add(l[c]);return f}))},N.prototype.loadCamera=function(e){var t,r=this.json.cameras[e],a=r[r.type];if(a)return"perspective"===r.type?t=new n.PerspectiveCamera(n.MathUtils.radToDeg(a.yfov),a.aspectRatio||1,a.znear||1,a.zfar||2e6):"orthographic"===r.type&&(t=new n.OrthographicCamera(-a.xmag,a.xmag,a.ymag,-a.ymag,a.znear,a.zfar)),r.name&&(t.name=r.name),D(t,r),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},N.prototype.loadSkin=function(e){var t=this.json.skins[e],r={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(r):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return r.inverseBindMatrices=e,r}))},N.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],r=[],a=[],o=[],i=[],s=[],l=0,c=t.channels.length;l<c;l++){var u=t.channels[l],h=t.samplers[u.sampler],d=u.target,p=void 0!==d.node?d.node:d.id,m=void 0!==t.parameters?t.parameters[h.input]:h.input,f=void 0!==t.parameters?t.parameters[h.output]:h.output;r.push(this.getDependency("node",p)),a.push(this.getDependency("accessor",m)),o.push(this.getDependency("accessor",f)),i.push(h),s.push(d)}return Promise.all([Promise.all(r),Promise.all(a),Promise.all(o),Promise.all(i),Promise.all(s)]).then((function(r){for(var a=r[0],o=r[1],i=r[2],s=r[3],l=r[4],c=[],u=0,h=a.length;u<h;u++){var d=a[u],p=o[u],m=i[u],f=s[u],g=l[u];if(void 0!==d){var v;switch(d.updateMatrix(),d.matrixAutoUpdate=!0,P[g.path]){case P.weights:v=n.NumberKeyframeTrack;break;case P.rotation:v=n.QuaternionKeyframeTrack;break;case P.position:case P.scale:default:v=n.VectorKeyframeTrack}var y=d.name?d.name:d.uuid,w=void 0!==f.interpolation?F[f.interpolation]:n.InterpolateLinear,L=[];P[g.path]===P.weights?d.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&L.push(e.name?e.name:e.uuid)})):L.push(y);var x=m.array;if(m.normalized){var M;if(x.constructor===Int8Array)M=1/127;else if(x.constructor===Uint8Array)M=1/255;else if(x.constructor==Int16Array)M=1/32767;else{if(x.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");M=1/65535}for(var E=new Float32Array(x.length),T=0,S=x.length;T<S;T++)E[T]=x[T]*M;x=E}for(T=0,S=L.length;T<S;T++){var R=new v(L[T]+"."+P[g.path],p.array,x,w);"CUBICSPLINE"===f.interpolation&&(R.createInterpolant=function(e){return new b(this.times,this.values,this.getValueSize()/3,e)},R.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),c.push(R)}}}var j=t.name?t.name:"animation_"+e;return new n.AnimationClip(j,void 0,c)}))},N.prototype.loadNode=function(e){var t,a=this.json,o=this.extensions,i=this,s=a.meshReferences,l=a.meshUses,c=a.nodes[e];return(t=[],void 0!==c.mesh&&t.push(i.getDependency("mesh",c.mesh).then((function(e){var t;if(s[c.mesh]>1){var r=l[c.mesh]++;(t=e.clone()).name+="_instance_"+r}else t=e;return void 0!==c.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,r=c.weights.length;t<r;t++)e.morphTargetInfluences[t]=c.weights[t]})),t}))),void 0!==c.camera&&t.push(i.getDependency("camera",c.camera)),c.extensions&&c.extensions[r.KHR_LIGHTS_PUNCTUAL]&&void 0!==c.extensions[r.KHR_LIGHTS_PUNCTUAL].light&&t.push(i.getDependency("light",c.extensions[r.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(t)).then((function(e){var t;if((t=!0===c.isBone?new n.Bone:e.length>1?new n.Group:1===e.length?e[0]:new n.Object3D)!==e[0])for(var r=0,a=e.length;r<a;r++)t.add(e[r]);if(c.name&&(t.userData.name=c.name,t.name=n.PropertyBinding.sanitizeNodeName(c.name)),D(t,c),c.extensions&&H(o,t,c),void 0!==c.matrix){var i=new n.Matrix4;i.fromArray(c.matrix),t.applyMatrix4(i)}else void 0!==c.translation&&t.position.fromArray(c.translation),void 0!==c.rotation&&t.quaternion.fromArray(c.rotation),void 0!==c.scale&&t.scale.fromArray(c.scale);return t}))},N.prototype.loadScene=function(){function e(t,r,a,o){var i=a.nodes[t];return o.getDependency("node",t).then((function(e){return void 0===i.skin?e:o.getDependency("skin",i.skin).then((function(e){for(var r=[],n=0,a=(t=e).joints.length;n<a;n++)r.push(o.getDependency("node",t.joints[n]));return Promise.all(r)})).then((function(r){return e.traverse((function(e){if(e.isMesh){for(var a=[],o=[],i=0,s=r.length;i<s;i++){var l=r[i];if(l){a.push(l);var c=new n.Matrix4;void 0!==t.inverseBindMatrices&&c.fromArray(t.inverseBindMatrices.array,16*i),o.push(c)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[i])}e.bind(new n.Skeleton(a,o),e.matrixWorld)}})),e}));var t})).then((function(t){r.add(t);var n=[];if(i.children)for(var s=i.children,l=0,c=s.length;l<c;l++){var u=s[l];n.push(e(u,t,a,o))}return Promise.all(n)}))}return function(t){var r=this.json,a=this.extensions,o=this.json.scenes[t],i=new n.Group;o.name&&(i.name=o.name),D(i,o),o.extensions&&H(a,i,o);for(var s=o.nodes||[],l=[],c=0,u=s.length;c<u;c++)l.push(e(s[c],i,r,this));return Promise.all(l).then((function(){return i}))}}(),e}()},"./src/js/app/loaders/MTLLoader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{MTLLoader:()=>a});var n=r("./node_modules/three/build/three.module.js"),a=function(e){n.Loader.call(this,e)};a.prototype=Object.assign(Object.create(n.Loader.prototype),{constructor:a,load:function(e,t,r,a){var o=this,i=""===this.path?n.LoaderUtils.extractUrlBase(e):this.path,s=new n.FileLoader(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(e,(function(r){try{t(o.parse(r,i))}catch(t){a?a(t):console.error(t),o.manager.itemError(e)}}),r,a)},setMaterialOptions:function(e){return this.materialOptions=e,this},parse:function(e,t){for(var r=e.split("\n"),n={},o=/\s+/,i={},s=0;s<r.length;s++){var l=r[s];if(0!==(l=l.trim()).length&&"#"!==l.charAt(0)){var c=l.indexOf(" "),u=c>=0?l.substring(0,c):l;u=u.toLowerCase();var h=c>=0?l.substring(c+1):"";if(h=h.trim(),"newmtl"===u)n={name:h},i[h]=n;else if("ka"===u||"kd"===u||"ks"===u||"ke"===u){var d=h.split(o,3);n[u]=[parseFloat(d[0]),parseFloat(d[1]),parseFloat(d[2])]}else n[u]=h}}var p=new a.MaterialCreator(this.resourcePath||t,this.materialOptions);return p.setCrossOrigin(this.crossOrigin),p.setManager(this.manager),p.setMaterials(i),p}}),a.MaterialCreator=function(e,t){this.baseUrl=e||"",this.options=t,this.materialsInfo={},this.materials={},this.materialsArray=[],this.nameLookup={},this.side=this.options&&this.options.side?this.options.side:n.FrontSide,this.wrap=this.options&&this.options.wrap?this.options.wrap:n.RepeatWrapping},a.MaterialCreator.prototype={constructor:a.MaterialCreator,crossOrigin:"anonymous",setCrossOrigin:function(e){return this.crossOrigin=e,this},setManager:function(e){this.manager=e},setMaterials:function(e){this.materialsInfo=this.convert(e),this.materials={},this.materialsArray=[],this.nameLookup={}},convert:function(e){if(!this.options)return e;var t={};for(var r in e){var n=e[r],a={};for(var o in t[r]=a,n){var i=!0,s=n[o],l=o.toLowerCase();switch(l){case"kd":case"ka":case"ks":this.options&&this.options.normalizeRGB&&(s=[s[0]/255,s[1]/255,s[2]/255]),this.options&&this.options.ignoreZeroRGBs&&0===s[0]&&0===s[1]&&0===s[2]&&(i=!1)}i&&(a[l]=s)}}return t},preload:function(){for(var e in this.materialsInfo)this.create(e)},getIndex:function(e){return this.nameLookup[e]},getAsArray:function(){var e=0;for(var t in this.materialsInfo)this.materialsArray[e]=this.create(t),this.nameLookup[t]=e,e++;return this.materialsArray},create:function(e){return void 0===this.materials[e]&&this.createMaterial_(e),this.materials[e]},createMaterial_:function(e){var t=this,r=this.materialsInfo[e],a={name:e,side:this.side};function o(e,r){if(!a[e]){var n,o,i=t.getTextureParams(r,a),s=t.loadTexture((n=t.baseUrl,"string"!=typeof(o=i.url)||""===o?"":/^https?:\/\//i.test(o)?o:n+o));s.repeat.copy(i.scale),s.offset.copy(i.offset),s.wrapS=t.wrap,s.wrapT=t.wrap,a[e]=s}}for(var i in r){var s,l=r[i];if(""!==l)switch(i.toLowerCase()){case"kd":a.color=(new n.Color).fromArray(l);break;case"ks":a.specular=(new n.Color).fromArray(l);break;case"ke":a.emissive=(new n.Color).fromArray(l);break;case"map_kd":o("map",l);break;case"map_ks":o("specularMap",l);break;case"map_ke":o("emissiveMap",l);break;case"norm":o("normalMap",l);break;case"map_bump":case"bump":o("bumpMap",l);break;case"map_d":o("alphaMap",l),a.transparent=!0;break;case"ns":a.shininess=parseFloat(l);break;case"d":(s=parseFloat(l))<1&&(a.opacity=s,a.transparent=!0);break;case"tr":s=parseFloat(l),this.options&&this.options.invertTrProperty&&(s=1-s),s>0&&(a.opacity=1-s,a.transparent=!0)}}return this.materials[e]=new n.MeshPhongMaterial(a),this.materials[e]},getTextureParams:function(e,t){var r,a={scale:new n.Vector2(1,1),offset:new n.Vector2(0,0)},o=e.split(/\s+/);return(r=o.indexOf("-bm"))>=0&&(t.bumpScale=parseFloat(o[r+1]),o.splice(r,2)),(r=o.indexOf("-s"))>=0&&(a.scale.set(parseFloat(o[r+1]),parseFloat(o[r+2])),o.splice(r,4)),(r=o.indexOf("-o"))>=0&&(a.offset.set(parseFloat(o[r+1]),parseFloat(o[r+2])),o.splice(r,4)),a.url=o.join(" ").trim(),a},loadTexture:function(e,t,r,a,o){var i,s=void 0!==this.manager?this.manager:n.DefaultLoadingManager,l=s.getHandler(e);return null===l&&(l=new n.TextureLoader(s)),l.setCrossOrigin&&l.setCrossOrigin(this.crossOrigin),i=l.load(e,r,a,o),void 0!==t&&(i.mapping=t),i}}},"./src/js/app/loaders/OBJLoader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{OBJLoader:()=>a});var n=r("./node_modules/three/build/three.module.js"),a=function(){var e=/^[og]\s*(.+)?/,t=/^mtllib /,r=/^usemtl /,a=/^usemap /,o=new n.Vector3,i=new n.Vector3,s=new n.Vector3,l=new n.Vector3,c=new n.Vector3;function u(){var e={objects:[],object:{},vertices:[],normals:[],colors:[],uvs:[],materials:{},materialLibraries:[],startObject:function(e,t){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=e,void(this.object.fromDeclaration=!1!==t);var r=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:e||"",fromDeclaration:!1!==t,geometry:{vertices:[],normals:[],colors:[],uvs:[],hasUVIndices:!1},materials:[],smooth:!0,startMaterial:function(e,t){var r=this._finalize(!1);r&&(r.inherited||r.groupCount<=0)&&this.materials.splice(r.index,1);var n={index:this.materials.length,name:e||"",mtllib:Array.isArray(t)&&t.length>0?t[t.length-1]:"",smooth:void 0!==r?r.smooth:this.smooth,groupStart:void 0!==r?r.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(e){var t={index:"number"==typeof e?e:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return t.clone=this.clone.bind(t),t}};return this.materials.push(n),n},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(e){var t=this.currentMaterial();if(t&&-1===t.groupEnd&&(t.groupEnd=this.geometry.vertices.length/3,t.groupCount=t.groupEnd-t.groupStart,t.inherited=!1),e&&this.materials.length>1)for(var r=this.materials.length-1;r>=0;r--)this.materials[r].groupCount<=0&&this.materials.splice(r,1);return e&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),t}},r&&r.name&&"function"==typeof r.clone){var n=r.clone(0);n.inherited=!0,this.object.materials.push(n)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseNormalIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseUVIndex:function(e,t){var r=parseInt(e,10);return 2*(r>=0?r-1:r+t/2)},addVertex:function(e,t,r){var n=this.vertices,a=this.object.geometry.vertices;a.push(n[e+0],n[e+1],n[e+2]),a.push(n[t+0],n[t+1],n[t+2]),a.push(n[r+0],n[r+1],n[r+2])},addVertexPoint:function(e){var t=this.vertices;this.object.geometry.vertices.push(t[e+0],t[e+1],t[e+2])},addVertexLine:function(e){var t=this.vertices;this.object.geometry.vertices.push(t[e+0],t[e+1],t[e+2])},addNormal:function(e,t,r){var n=this.normals,a=this.object.geometry.normals;a.push(n[e+0],n[e+1],n[e+2]),a.push(n[t+0],n[t+1],n[t+2]),a.push(n[r+0],n[r+1],n[r+2])},addFaceNormal:function(e,t,r){var n=this.vertices,a=this.object.geometry.normals;o.fromArray(n,e),i.fromArray(n,t),s.fromArray(n,r),c.subVectors(s,i),l.subVectors(o,i),c.cross(l),c.normalize(),a.push(c.x,c.y,c.z),a.push(c.x,c.y,c.z),a.push(c.x,c.y,c.z)},addColor:function(e,t,r){var n=this.colors,a=this.object.geometry.colors;void 0!==n[e]&&a.push(n[e+0],n[e+1],n[e+2]),void 0!==n[t]&&a.push(n[t+0],n[t+1],n[t+2]),void 0!==n[r]&&a.push(n[r+0],n[r+1],n[r+2])},addUV:function(e,t,r){var n=this.uvs,a=this.object.geometry.uvs;a.push(n[e+0],n[e+1]),a.push(n[t+0],n[t+1]),a.push(n[r+0],n[r+1])},addDefaultUV:function(){var e=this.object.geometry.uvs;e.push(0,0),e.push(0,0),e.push(0,0)},addUVLine:function(e){var t=this.uvs;this.object.geometry.uvs.push(t[e+0],t[e+1])},addFace:function(e,t,r,n,a,o,i,s,l){var c=this.vertices.length,u=this.parseVertexIndex(e,c),h=this.parseVertexIndex(t,c),d=this.parseVertexIndex(r,c);if(this.addVertex(u,h,d),this.addColor(u,h,d),void 0!==i&&""!==i){var p=this.normals.length;u=this.parseNormalIndex(i,p),h=this.parseNormalIndex(s,p),d=this.parseNormalIndex(l,p),this.addNormal(u,h,d)}else this.addFaceNormal(u,h,d);if(void 0!==n&&""!==n){var m=this.uvs.length;u=this.parseUVIndex(n,m),h=this.parseUVIndex(a,m),d=this.parseUVIndex(o,m),this.addUV(u,h,d),this.object.geometry.hasUVIndices=!0}else this.addDefaultUV()},addPointGeometry:function(e){this.object.geometry.type="Points";for(var t=this.vertices.length,r=0,n=e.length;r<n;r++){var a=this.parseVertexIndex(e[r],t);this.addVertexPoint(a),this.addColor(a)}},addLineGeometry:function(e,t){this.object.geometry.type="Line";for(var r=this.vertices.length,n=this.uvs.length,a=0,o=e.length;a<o;a++)this.addVertexLine(this.parseVertexIndex(e[a],r));var i=0;for(o=t.length;i<o;i++)this.addUVLine(this.parseUVIndex(t[i],n))}};return e.startObject("",!1),e}function h(e){n.Loader.call(this,e),this.materials=null}return h.prototype=Object.assign(Object.create(n.Loader.prototype),{constructor:h,load:function(e,t,r,a){var o=this,i=new n.FileLoader(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(e,(function(r){try{t(o.parse(r))}catch(t){a?a(t):console.error(t),o.manager.itemError(e)}}),r,a)},setMaterials:function(e){return this.materials=e,this},parse:function(o){var i=new u;-1!==o.indexOf("\r\n")&&(o=o.replace(/\r\n/g,"\n")),-1!==o.indexOf("\\\n")&&(o=o.replace(/\\\n/g,""));for(var s=o.split("\n"),l="",c="",h=[],d="function"==typeof"".trimLeft,p=0,m=s.length;p<m;p++)if(l=s[p],0!==(l=d?l.trimLeft():l.trim()).length&&"#"!==(c=l.charAt(0)))if("v"===c){var f=l.split(/\s+/);switch(f[0]){case"v":i.vertices.push(parseFloat(f[1]),parseFloat(f[2]),parseFloat(f[3])),f.length>=7?i.colors.push(parseFloat(f[4]),parseFloat(f[5]),parseFloat(f[6])):i.colors.push(void 0,void 0,void 0);break;case"vn":i.normals.push(parseFloat(f[1]),parseFloat(f[2]),parseFloat(f[3]));break;case"vt":i.uvs.push(parseFloat(f[1]),parseFloat(f[2]))}}else if("f"===c){for(var g=l.substr(1).trim().split(/\s+/),v=[],b=0,y=g.length;b<y;b++){var w=g[b];if(w.length>0){var L=w.split("/");v.push(L)}}var x=v[0];for(b=1,y=v.length-1;b<y;b++){var M=v[b],E=v[b+1];i.addFace(x[0],M[0],E[0],x[1],M[1],E[1],x[2],M[2],E[2])}}else if("l"===c){var T=l.substring(1).trim().split(" "),S=[],R=[];if(-1===l.indexOf("/"))S=T;else for(var j=0,A=T.length;j<A;j++){var C=T[j].split("/");""!==C[0]&&S.push(C[0]),""!==C[1]&&R.push(C[1])}i.addLineGeometry(S,R)}else if("p"===c){var P=l.substr(1).trim().split(" ");i.addPointGeometry(P)}else if(null!==(h=e.exec(l))){var F=(" "+h[0].substr(1).trim()).substr(1);i.startObject(F)}else if(r.test(l))i.object.startMaterial(l.substring(7).trim(),i.materialLibraries);else if(t.test(l))i.materialLibraries.push(l.substring(7).trim());else if(a.test(l))console.warn('THREE.OBJLoader: Rendering identifier "usemap" not supported. Textures must be defined in MTL files.');else if("s"===c){if((h=l.split(" ")).length>1){var _=h[1].trim().toLowerCase();i.object.smooth="0"!==_&&"off"!==_}else i.object.smooth=!0;(X=i.object.currentMaterial())&&(X.smooth=i.object.smooth)}else{if("\0"===l)continue;console.warn('THREE.OBJLoader: Unexpected line: "'+l+'"')}i.finalize();var O=new n.Group;if(O.materialLibraries=[].concat(i.materialLibraries),!0===!(1===i.objects.length&&0===i.objects[0].geometry.vertices.length))for(p=0,m=i.objects.length;p<m;p++){var k=i.objects[p],I=k.geometry,U=k.materials,H="Line"===I.type,D="Points"===I.type,G=!1;if(0!==I.vertices.length){(q=new n.BufferGeometry).setAttribute("position",new n.Float32BufferAttribute(I.vertices,3)),I.normals.length>0&&q.setAttribute("normal",new n.Float32BufferAttribute(I.normals,3)),I.colors.length>0&&(G=!0,q.setAttribute("color",new n.Float32BufferAttribute(I.colors,3))),!0===I.hasUVIndices&&q.setAttribute("uv",new n.Float32BufferAttribute(I.uvs,2));for(var B,N=[],z=0,V=U.length;z<V;z++){var K=(Y=U[z]).name+"_"+Y.smooth+"_"+G,X=i.materials[K];if(null!==this.materials)if(X=this.materials.create(Y.name),!H||!X||X instanceof n.LineBasicMaterial){if(D&&X&&!(X instanceof n.PointsMaterial)){var Z=new n.PointsMaterial({size:10,sizeAttenuation:!1});n.Material.prototype.copy.call(Z,X),Z.color.copy(X.color),Z.map=X.map,X=Z}}else{var W=new n.LineBasicMaterial;n.Material.prototype.copy.call(W,X),W.color.copy(X.color),X=W}void 0===X&&((X=H?new n.LineBasicMaterial:D?new n.PointsMaterial({size:1,sizeAttenuation:!1}):new n.MeshPhongMaterial).name=Y.name,X.flatShading=!Y.smooth,X.vertexColors=G,i.materials[K]=X),N.push(X)}if(N.length>1){for(z=0,V=U.length;z<V;z++){var Y=U[z];q.addGroup(Y.groupStart,Y.groupCount,z)}B=H?new n.LineSegments(q,N):D?new n.Points(q,N):new n.Mesh(q,N)}else B=H?new n.LineSegments(q,N[0]):D?new n.Points(q,N[0]):new n.Mesh(q,N[0]);B.name=k.name,O.add(B)}}else if(i.vertices.length>0){var q;X=new n.PointsMaterial({size:1,sizeAttenuation:!1});(q=new n.BufferGeometry).setAttribute("position",new n.Float32BufferAttribute(i.vertices,3)),i.colors.length>0&&void 0!==i.colors[0]&&(q.setAttribute("color",new n.Float32BufferAttribute(i.colors,3)),X.vertexColors=!0);var J=new n.Points(q,X);O.add(J)}return O}}),h}()},"./src/js/app/main3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>v});var n=r("./node_modules/three/build/three.module.js"),a=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),o=r("./src/js/app/components/renderer.js"),i=r("./src/js/app/components/camera.js"),s=r("./src/js/app/components/light.js"),l=r("./src/js/app/components/controls.js"),c=r("./src/js/app/components/geometry.js"),u=r("./src/js/app/helpers/stats.js"),h=(r("./src/js/app/helpers/meshHelper.js"),r("./src/js/app/model/texture.js"),r("./src/js/app/model/model.js"),r("./src/js/app/managers/interaction.js")),d=r("./src/js/app/managers/datGUI.js"),p=r("./src/js/data/config.js"),m=r("./src/js/app/loaders/OBJLoader.js"),f=r("./src/js/app/loaders/MTLLoader.js");function g(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var v=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a="VCOE2100080-S3R1_0";this.container=t,this.clock=new n.Clock,this.scene=new n.Scene,this.scene.fog=new n.FogExp2(p.default.fog.color,p.default.fog.near),window.devicePixelRatio&&(p.default.dpr=window.devicePixelRatio),this.renderer=new o.default(this.scene,t),this.camera=new i.default(this.renderer.threeRenderer),this.controls=new l.default(this.camera.threeCamera,t),this.light=new s.default(this.scene);["ambient","directional","point","hemi"].forEach((function(e){return r.light.place(e)})),this.geometry=new c.default(this.scene),this.geometry.make("plane")(150,150,10,10),this.geometry.place([0,-20,0],[Math.PI/2,0,0]),p.default.isDev&&p.default.isShowingStats&&(this.stats=new u.default(this.renderer),this.stats.setUp()),p.default.isDev&&(this.gui=new d.default(this));var g=this,v=new n.LoadingManager;function b(e){}function y(){}this.manager=v,this.manager.onLoad=function(){r.setContent(),r.scene.add(r.object),new h.default(r.renderer.threeRenderer,r.scene,r.camera.threeCamera,r.controls.threeControls),p.default.isDev&&r.gui.load(r,r.object),p.default.isLoaded=!0,r.container.querySelector("#loading").style.display="none"};var w=new f.MTLLoader(v),L=new m.OBJLoader(v);w.setPath("https://liyang-assets.explorium.cn/3d/VCOE2100080-S3R1/").load("".concat(a,".mtl"),(function(e){e.preload(),L.setMaterials(e),L.load("https://liyang-assets.explorium.cn/3d/VCOE2100080-S3R1/".concat(a,".obj"),(function(e){e,g.object=e}),b,y)})),this.render()}var t,r,v;return t=e,(r=[{key:"setContent",value:function(){this.object.updateMatrixWorld();var e=(new n.Box3).setFromObject(this.object),t=(e.getSize(new n.Vector3).length(),e.getSize()),r=e.getCenter(new n.Vector3);this.object.position.x+=this.object.position.x-r.x,this.object.position.y+=this.object.position.y-r.y,this.object.position.z+=this.object.position.z-r.z,console.log("camera:",this.camera),console.log("position:",this.camera.threeCamera.position),this.camera.threeCamera.position.copy(r),t.x>t.y?this.camera.threeCamera.position.z=-.5*-t.x:this.camera.threeCamera.position.z=3*t.y,this.camera.threeCamera.lookAt(0,0,0)}},{key:"render",value:function(){p.default.isDev&&p.default.isShowingStats&&u.default.start(),this.renderer.render(this.scene,this.camera.threeCamera),p.default.isDev&&p.default.isShowingStats&&u.default.end(),a.default.update(),this.controls.threeControls.update(),requestAnimationFrame(this.render.bind(this))}}])&&g(t.prototype,r),v&&g(t,v),e}()},"./src/js/app/managers/datGUI.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./src/js/data/config.js");function a(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.gui=new dat.GUI,this.camera=t.camera.threeCamera,this.controls=t.controls.threeControls,this.light=t.light,this.scene=t.scene,this.model=null,this.meshHelper=null}var t,r,o;return t=e,(r=[{key:"load",value:function(e,t){var r=this;this.model=e.model,this.meshHelper=e.meshHelper;var o=this.gui.addFolder("Camera"),i=o.add(n.default.camera,"fov",0,180).name("Camera FOV");i.onChange((function(e){r.controls.enableRotate=!1,r.camera.fov=e})),i.onFinishChange((function(){r.camera.updateProjectionMatrix(),r.controls.enableRotate=!0}));var s=o.add(n.default.camera,"aspect",0,4).name("Camera Aspect");s.onChange((function(e){r.controls.enableRotate=!1,r.camera.aspect=e})),s.onFinishChange((function(){r.camera.updateProjectionMatrix(),r.controls.enableRotate=!0})),o.addColor(n.default.fog,"color").name("Fog Color").onChange((function(e){r.scene.fog.color.setHex(e)}));var l=o.add(n.default.fog,"near",0,.01).name("Fog Near");l.onChange((function(e){r.controls.enableRotate=!1,r.scene.fog.density=e})),l.onFinishChange((function(){r.controls.enableRotate=!0}));var c=this.gui.addFolder("Controls");c.add(n.default.controls,"autoRotate").name("Auto Rotate").onChange((function(e){r.controls.autoRotate=e}));var u=c.add(n.default.controls,"autoRotateSpeed",-1,1).name("Rotation Speed");u.onChange((function(e){r.controls.enableRotate=!1,r.controls.autoRotateSpeed=e})),u.onFinishChange((function(){r.controls.enableRotate=!0})),this.gui.addFolder("Model").add(n.default.model,"type",a(n.default.model.initialTypes)).name("Select Model").onChange((function(e){e&&(n.default.mesh.enableHelper&&r.meshHelper.disable(),n.default.model.selected=n.default.model.initialTypes.indexOf(e),r.unload(),r.model.unload(),r.model.load(e))}));var h=this.gui.addFolder("Mesh");h.add(n.default.mesh,"enableHelper",!0).name("Enable Helpers").onChange((function(e){e?r.meshHelper.enable():r.meshHelper.disable()})),h.add(n.default.mesh,"translucent",!0).name("Translucent").onChange((function(e){e?(t.material.transparent=!0,t.material.opacity=.5):t.material.opacity=1})),h.add(n.default.mesh,"wireframe",!0).name("Wireframe").onChange((function(e){t.material.wireframe=e}));var d=this.gui.addFolder("Ambient Light");d.add(n.default.ambientLight,"enabled").name("Enabled").onChange((function(e){r.light.ambientLight.visible=e})),d.addColor(n.default.ambientLight,"color").name("Color").onChange((function(e){r.light.ambientLight.color.setHex(e)}));var p=this.gui.addFolder("Directional Light");p.add(n.default.directionalLight,"enabled").name("Enabled").onChange((function(e){r.light.directionalLight.visible=e})),p.addColor(n.default.directionalLight,"color").name("Color").onChange((function(e){r.light.directionalLight.color.setHex(e)}));var m=p.add(n.default.directionalLight,"intensity",0,2).name("Intensity");m.onChange((function(e){r.controls.enableRotate=!1,r.light.directionalLight.intensity=e})),m.onFinishChange((function(){r.controls.enableRotate=!0}));var f=p.add(n.default.directionalLight,"x",-1e3,1e3).name("Position X");f.onChange((function(e){r.controls.enableRotate=!1,r.light.directionalLight.position.x=e})),f.onFinishChange((function(){r.controls.enableRotate=!0}));var g=p.add(n.default.directionalLight,"y",-1e3,1e3).name("Position Y");g.onChange((function(e){r.controls.enableRotate=!1,r.light.directionalLight.position.y=e})),g.onFinishChange((function(){r.controls.enableRotate=!0}));var v=p.add(n.default.directionalLight,"z",-1e3,1e3).name("Position Z");v.onChange((function(e){r.controls.enableRotate=!1,r.light.directionalLight.position.z=e})),v.onFinishChange((function(){r.controls.enableRotate=!0}));var b=this.gui.addFolder("Shadow Map");b.add(n.default.shadow,"enabled").name("Enabled").onChange((function(e){r.light.directionalLight.castShadow=e})),b.add(n.default.shadow,"helperEnabled").name("Helper Enabled").onChange((function(e){r.light.directionalLightHelper.visible=e}));var y=b.add(n.default.shadow,"near",0,400).name("Near");y.onChange((function(e){r.controls.enableRotate=!1,r.light.directionalLight.shadow.camera.near=e})),y.onFinishChange((function(){r.controls.enableRotate=!0,r.light.directionalLight.shadow.map.dispose(),r.light.directionalLight.shadow.map=null,r.light.directionalLightHelper.update()}));var w=b.add(n.default.shadow,"far",0,1200).name("Far");w.onChange((function(e){r.controls.enableRotate=!1,r.light.directionalLight.shadow.camera.far=e})),w.onFinishChange((function(){r.controls.enableRotate=!0,r.light.directionalLight.shadow.map.dispose(),r.light.directionalLight.shadow.map=null,r.light.directionalLightHelper.update()}));var L=b.add(n.default.shadow,"top",-400,400).name("Top");L.onChange((function(e){r.controls.enableRotate=!1,r.light.directionalLight.shadow.camera.top=e})),L.onFinishChange((function(){r.controls.enableRotate=!0,r.light.directionalLight.shadow.map.dispose(),r.light.directionalLight.shadow.map=null,r.light.directionalLightHelper.update()}));var x=b.add(n.default.shadow,"right",-400,400).name("Right");x.onChange((function(e){r.controls.enableRotate=!1,r.light.directionalLight.shadow.camera.right=e})),x.onFinishChange((function(){r.controls.enableRotate=!0,r.light.directionalLight.shadow.map.dispose(),r.light.directionalLight.shadow.map=null,r.light.directionalLightHelper.update()}));var M=b.add(n.default.shadow,"bottom",-400,400).name("Bottom");M.onChange((function(e){r.controls.enableRotate=!1,r.light.directionalLight.shadow.camera.bottom=e})),M.onFinishChange((function(){r.controls.enableRotate=!0,r.light.directionalLight.shadow.map.dispose(),r.light.directionalLight.shadow.map=null,r.light.directionalLightHelper.update()}));var E=b.add(n.default.shadow,"left",-400,400).name("Left");E.onChange((function(e){r.controls.enableRotate=!1,r.light.directionalLight.shadow.camera.left=e})),E.onFinishChange((function(){r.controls.enableRotate=!0,r.light.directionalLight.shadow.map.dispose(),r.light.directionalLight.shadow.map=null,r.light.directionalLightHelper.update()}));var T=b.add(n.default.shadow,"bias",-1e-5,1).name("Bias");T.onChange((function(e){r.controls.enableRotate=!1,r.light.directionalLight.shadow.bias=e})),T.onFinishChange((function(){r.controls.enableRotate=!0,r.light.directionalLight.shadow.map.dispose(),r.light.directionalLight.shadow.map=null,r.light.directionalLightHelper.update()}));var S=this.gui.addFolder("Point Light");S.add(n.default.pointLight,"enabled").name("Enabled").onChange((function(e){r.light.pointLight.visible=e})),S.addColor(n.default.pointLight,"color").name("Color").onChange((function(e){r.light.pointLight.color.setHex(e)}));var R=S.add(n.default.pointLight,"intensity",0,2).name("Intensity");R.onChange((function(e){r.controls.enableRotate=!1,r.light.pointLight.intensity=e})),R.onFinishChange((function(){r.controls.enableRotate=!0}));var j=S.add(n.default.pointLight,"distance",0,1e3).name("Distance");j.onChange((function(e){r.controls.enableRotate=!1,r.light.pointLight.distance=e})),j.onFinishChange((function(){r.controls.enableRotate=!0}));var A=S.add(n.default.pointLight,"x",-1e3,1e3).name("Position X");A.onChange((function(e){r.controls.enableRotate=!1,r.light.pointLight.position.x=e})),A.onFinishChange((function(){r.controls.enableRotate=!0}));var C=S.add(n.default.pointLight,"y",-1e3,1e3).name("Position Y");C.onChange((function(e){r.controls.enableRotate=!1,r.light.pointLight.position.y=e})),C.onFinishChange((function(){r.controls.enableRotate=!0}));var P=S.add(n.default.pointLight,"z",-1e3,1e3).name("Position Z");P.onChange((function(e){r.controls.enableRotate=!1,r.light.pointLight.position.z=e})),P.onFinishChange((function(){r.controls.enableRotate=!0}));var F=this.gui.addFolder("Hemi Light");F.add(n.default.hemiLight,"enabled").name("Enabled").onChange((function(e){r.light.hemiLight.visible=e})),F.addColor(n.default.hemiLight,"color").name("Color").onChange((function(e){r.light.hemiLight.color.setHex(e)})),F.addColor(n.default.hemiLight,"groundColor").name("ground Color").onChange((function(e){r.light.hemiLight.groundColor.setHex(e)}));var _=F.add(n.default.hemiLight,"intensity",0,2).name("Intensity");_.onChange((function(e){r.controls.enableRotate=!1,r.light.hemiLight.intensity=e})),_.onFinishChange((function(){r.controls.enableRotate=!0}));var O=F.add(n.default.hemiLight,"x",-1e3,1e3).name("Position X");O.onChange((function(e){r.controls.enableRotate=!1,r.light.hemiLight.position.x=e})),O.onFinishChange((function(){r.controls.enableRotate=!0}));var k=F.add(n.default.hemiLight,"y",-500,1e3).name("Position Y");k.onChange((function(e){r.controls.enableRotate=!1,r.light.hemiLight.position.y=e})),k.onFinishChange((function(){r.controls.enableRotate=!0}));var I=F.add(n.default.hemiLight,"z",-1e3,1e3).name("Position Z");I.onChange((function(e){r.controls.enableRotate=!1,r.light.hemiLight.position.z=e})),I.onFinishChange((function(){r.controls.enableRotate=!0}))}},{key:"unload",value:function(){this.gui.destroy(),this.gui=new dat.GUI}}])&&i(t.prototype,r),o&&i(t,o),e}()},"./src/js/app/managers/interaction.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./src/js/utils/keyboard.js"),a=r("./src/js/utils/helpers.js"),o=r("./src/js/data/config.js");function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t,r,o,i){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t,this.scene=r,this.camera=o,this.controls=i,this.timeout=null,this.keyboard=new n.default,this.renderer.domElement.addEventListener("mousemove",(function(e){return a.default.throttle(s.onMouseMove(e),250)}),!1),this.renderer.domElement.addEventListener("mouseleave",(function(e){return s.onMouseLeave(e)}),!1),this.renderer.domElement.addEventListener("mouseover",(function(e){return s.onMouseOver(e)}),!1),this.keyboard.domElement.addEventListener("keydown",(function(e){e.repeat||s.keyboard.eventMatches(e,"escape")&&console.log("Escape pressed")}))}var t,r,s;return t=e,(r=[{key:"onMouseOver",value:function(e){e.preventDefault(),o.default.isMouseOver=!0}},{key:"onMouseLeave",value:function(e){e.preventDefault(),o.default.isMouseOver=!1}},{key:"onMouseMove",value:function(e){e.preventDefault(),clearTimeout(this.timeout),this.timeout=setTimeout((function(){o.default.isMouseMoving=!1}),200),o.default.isMouseMoving=!0}}])&&i(t.prototype,r),s&&i(t,s),e}()},"./src/js/app/model/model.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/three/build/three.module.js"),a=r("./src/js/app/components/material.js"),o=r("./src/js/utils/helpers.js"),i=r("./src/js/utils/bufferGeometryUtils.js"),s=r("./src/js/app/loaders/GLTFLoader.js"),l=r("./src/js/data/config.js");function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=function(){function e(t,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.textures=n,this.manager=r,this.obj=null,this.ref=null}var t,r,u;return t=e,(r=[{key:"load",value:function(e){var t=this;switch(e){case"gltf":new s.GLTFLoader(this.manager).load(l.default.models[l.default.model.selected].path,(function(e){var r,a=e.scene;l.default.shadow.enabled&&a.traverse((function(e){(e.isMesh||e.isLight)&&(e.castShadow=!0),e.isMesh&&(e.material.wireframe=l.default.mesh.wireframe,r=e)})),t.obj=r,i.BufferGeometryUtils.computeTangents(r.geometry);var o=new n.Group;o.scale.multiplyScalar(.25),t.scene.add(o),t.ref=o,o.updateMatrixWorld(!0),o.add(r),t.scene.add(a)}),o.default.logProgress(),o.default.logError());break;case"object":new n.ObjectLoader(this.manager).load(l.default.models[l.default.model.selected].path,(function(e){e.traverse((function(e){if(e instanceof n.Mesh){var r=new a.default(16777215).standard;r.map=t.textures.UV,e.material=r,l.default.shadow.enabled&&(e.receiveShadow=!0,e.castShadow=!0)}})),t.obj=e,t.ref=e,e.scale.multiplyScalar(l.default.models[l.default.model.selected].scale),t.scene.add(e)}),o.default.logProgress(),o.default.logError())}}},{key:"unload",value:function(){this.scene.remove(this.ref)}}])&&c(t.prototype,r),u&&c(t,u),e}()},"./src/js/app/model/texture.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/three/build/three.module.js"),a=r("./node_modules/es6-promise/dist/es6-promise.js"),o=r("./src/js/utils/helpers.js"),i=r("./src/js/data/config.js");function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.textures={}}var t,r,l;return t=e,(r=[{key:"load",value:function(){var e=this,t=new n.TextureLoader,r=i.default.maxAnisotropy,s=i.default.texture.imageFiles,l=[];return t.setPath(i.default.texture.path),s.forEach((function(e){l.push(new a.Promise((function(a,i){t.load(e.image,(function(t){t.anisotropy=r;var o={};o[e.name]=t,o[e.name]instanceof n.Texture&&a(o)}),o.default.logProgress(),(function(t){return i(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),a.Promise.all(l).then((function(t){for(var r=0;r<t.length;r++)e.textures[Object.keys(t[r])[0]]=t[r][Object.keys(t[r])[0]]}),(function(e){return console.log(e)}))}}])&&s(t.prototype,r),l&&s(t,l),e}()},"./src/js/data/config.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js").default.Easing.Quadratic.InOut,duration:500,model:{selected:0,initialTypes:["gltf","object"],type:"gltf"},models:[{path:"./assets/models/duck.gltf",scale:20,type:"gltf"},{path:"./assets/models/Teapot.json",scale:20,type:"object"}],texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!0,wireframe:!1,translucent:!1,material:{color:16777215,emissive:16777215}},fog:{color:16777215,near:8e-4},camera:{fov:40,near:2,far:1e3,aspect:1,posX:0,posY:30,posZ:40},controls:{autoRotate:!0,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:200,maxDistance:600,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/2,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}}},"./src/js/utils/bufferGeometryUtils.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{BufferGeometryUtils:()=>a});var n=r("./node_modules/three/build/three.module.js"),a={computeTangents:function(e){var t=e.index,r=e.attributes;if(null!==t&&void 0!==r.position&&void 0!==r.normal&&void 0!==r.uv){var a=t.array,o=r.position.array,i=r.normal.array,s=r.uv.array,l=o.length/3;void 0===r.tangent&&e.setAttribute("tangent",new n.BufferAttribute(new Float32Array(4*l),4));for(var c=r.tangent.array,u=[],h=[],d=0;d<l;d++)u[d]=new n.Vector3,h[d]=new n.Vector3;var p=new n.Vector3,m=new n.Vector3,f=new n.Vector3,g=new n.Vector2,v=new n.Vector2,b=new n.Vector2,y=new n.Vector3,w=new n.Vector3,L=e.groups;0===L.length&&(L=[{start:0,count:a.length}]);d=0;for(var x=L.length;d<x;++d)for(var M=_=(F=L[d]).start,E=_+F.count;M<E;M+=3)O(a[M+0],a[M+1],a[M+2]);var T,S,R,j=new n.Vector3,A=new n.Vector3,C=new n.Vector3,P=new n.Vector3;for(d=0,x=L.length;d<x;++d){var F,_;for(M=_=(F=L[d]).start,E=_+F.count;M<E;M+=3)k(a[M+0]),k(a[M+1]),k(a[M+2])}}else console.error("THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");function O(e,t,r){p.fromArray(o,3*e),m.fromArray(o,3*t),f.fromArray(o,3*r),g.fromArray(s,2*e),v.fromArray(s,2*t),b.fromArray(s,2*r),m.sub(p),f.sub(p),v.sub(g),b.sub(g);var n=1/(v.x*b.y-b.x*v.y);isFinite(n)&&(y.copy(m).multiplyScalar(b.y).addScaledVector(f,-v.y).multiplyScalar(n),w.copy(f).multiplyScalar(v.x).addScaledVector(m,-b.x).multiplyScalar(n),u[e].add(y),u[t].add(y),u[r].add(y),h[e].add(w),h[t].add(w),h[r].add(w))}function k(e){C.fromArray(i,3*e),P.copy(C),S=u[e],j.copy(S),j.sub(C.multiplyScalar(C.dot(S))).normalize(),A.crossVectors(P,S),R=A.dot(h[e]),T=R<0?-1:1,c[4*e]=j.x,c[4*e+1]=j.y,c[4*e+2]=j.z,c[4*e+3]=T}},mergeBufferGeometries:function(e,t){for(var r=null!==e[0].index,a=new Set(Object.keys(e[0].attributes)),o=new Set(Object.keys(e[0].morphAttributes)),i={},s={},l=e[0].morphTargetsRelative,c=new n.BufferGeometry,u=0,h=0;h<e.length;++h){var d=e[h],p=0;if(r!==(null!==d.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+h+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var m in d.attributes){if(!a.has(m))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+h+'. All geometries must have compatible attributes; make sure "'+m+'" attribute exists among all geometries, or in none of them.'),null;void 0===i[m]&&(i[m]=[]),i[m].push(d.attributes[m]),p++}if(p!==a.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+h+". Make sure all geometries have the same number of attributes."),null;if(l!==d.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+h+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var m in d.morphAttributes){if(!o.has(m))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+h+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===s[m]&&(s[m]=[]),s[m].push(d.morphAttributes[m])}if(c.userData.mergedUserData=c.userData.mergedUserData||[],c.userData.mergedUserData.push(d.userData),t){var f;if(r)f=d.index.count;else{if(void 0===d.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+h+". The geometry must have either an index or a position attribute"),null;f=d.attributes.position.count}c.addGroup(u,f,h),u+=f}}if(r){var g=0,v=[];for(h=0;h<e.length;++h){for(var b=e[h].index,y=0;y<b.count;++y)v.push(b.getX(y)+g);g+=e[h].attributes.position.count}c.setIndex(v)}for(var m in i){var w=this.mergeBufferAttributes(i[m]);if(!w)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+m+" attribute."),null;c.setAttribute(m,w)}for(var m in s){var L=s[m][0].length;if(0===L)break;c.morphAttributes=c.morphAttributes||{},c.morphAttributes[m]=[];for(h=0;h<L;++h){var x=[];for(y=0;y<s[m].length;++y)x.push(s[m][y][h]);var M=this.mergeBufferAttributes(x);if(!M)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+m+" morphAttribute."),null;c.morphAttributes[m].push(M)}}return c},mergeBufferAttributes:function(e){for(var t,r,a,o=0,i=0;i<e.length;++i){var s=e[i];if(s.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===r&&(r=s.itemSize),r!==s.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===a&&(a=s.normalized),a!==s.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;o+=s.array.length}var l=new t(o),c=0;for(i=0;i<e.length;++i)l.set(e[i].array,c),c+=e[i].array.length;return new n.BufferAttribute(l,r,a)},interleaveAttributes:function(e){for(var t,r=0,a=0,o=0,i=e.length;o<i;++o){var s=e[o];if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;r+=s.array.length,a+=s.itemSize}var l=new n.InterleavedBuffer(new t(r),a),c=0,u=[],h=["getX","getY","getZ","getW"],d=["setX","setY","setZ","setW"],p=0;for(i=e.length;p<i;p++){var m=(s=e[p]).itemSize,f=s.count,g=new n.InterleavedBufferAttribute(l,m,c,s.normalized);u.push(g),c+=m;for(var v=0;v<f;v++)for(var b=0;b<m;b++)g[d[b]](v,s[h[b]](v))}return u},estimateBytesUsed:function(e){var t=0;for(var r in e.attributes){var n=e.getAttribute(r);t+=n.count*n.itemSize*n.array.BYTES_PER_ELEMENT}var a=e.getIndex();return t+=a?a.count*a.itemSize*a.array.BYTES_PER_ELEMENT:0},mergeVertices:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e-4;t=Math.max(t,Number.EPSILON);for(var r={},a=e.getIndex(),o=e.getAttribute("position"),i=a?a.count:o.count,s=0,l=Object.keys(e.attributes),c={},u={},h=[],d=["getX","getY","getZ","getW"],p=0,m=l.length;p<m;p++){c[w=l[p]]=[],(E=e.morphAttributes[w])&&(u[w]=new Array(E.length).fill().map((function(){return[]})))}var f=Math.log10(1/t),g=Math.pow(10,f);for(p=0;p<i;p++){var v=a?a.getX(p):p,b="",y=0;for(m=l.length;y<m;y++)for(var w=l[y],L=(M=e.getAttribute(w)).itemSize,x=0;x<L;x++)b+="".concat(~~(M[d[x]](v)*g),",");if(b in r)h.push(r[b]);else{for(y=0,m=l.length;y<m;y++){w=l[y];var M=e.getAttribute(w),E=e.morphAttributes[w],T=(L=M.itemSize,c[w]),S=u[w];for(x=0;x<L;x++){var R=d[x];if(T.push(M[R](v)),E)for(var j=0,A=E.length;j<A;j++)S[j].push(E[j][R](v))}}r[b]=s,h.push(s),s++}}var C=e.clone();for(p=0,m=l.length;p<m;p++){w=l[p];var P=e.getAttribute(w),F=new P.array.constructor(c[w]);M=new n.BufferAttribute(F,P.itemSize,P.normalized);if(C.setAttribute(w,M),w in u)for(y=0;y<u[w].length;y++){var _=e.morphAttributes[w][y],O=(F=new _.array.constructor(u[w][y]),new n.BufferAttribute(F,_.itemSize,_.normalized));C.morphAttributes[w][y]=O}}return C.setIndex(h),C},toTrianglesDrawMode:function(e,t){if(t===n.TrianglesDrawMode)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===n.TriangleFanDrawMode||t===n.TriangleStripDrawMode){var r=e.getIndex();if(null===r){var a=[],o=e.getAttribute("position");if(void 0===o)return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<o.count;i++)a.push(i);e.setIndex(a),r=e.getIndex()}var s=r.count-2,l=[];if(t===n.TriangleFanDrawMode)for(i=1;i<=s;i++)l.push(r.getX(0)),l.push(r.getX(i)),l.push(r.getX(i+1));else for(i=0;i<s;i++)i%2==0?(l.push(r.getX(i)),l.push(r.getX(i+1)),l.push(r.getX(i+2))):(l.push(r.getX(i+2)),l.push(r.getX(i+1)),l.push(r.getX(i)));l.length/3!==s&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var c=e.clone();return c.setIndex(l),c.clearGroups(),c}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e}}},"./src/js/utils/detector.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,r,n;t=void 0!==(e=e||{}).parent?e.parent:document.body,r=void 0!==e.id?e.id:"oldie",(n=this.getWebGLErrorMessage()).id=r,t.appendChild(n)}}},"./src/js/utils/helpers.js":(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}r.r(t),r.d(t,{default:()=>a});var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r,a;return t=e,a=[{key:"throttle",value:function(e,t,r){var n,a;return t||(t=250),function(){var o=r||this,i=+new Date,s=arguments;n&&i<n+t?(clearTimeout(a),a=setTimeout((function(){n=i,e.apply(o,s)}),t)):(n=i,e.apply(o,s))}}},{key:"logProgress",value:function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t,2)+"% downloaded")}}}},{key:"logError",value:function(){return function(e){console.error(e)}}},{key:"handleColorChange",value:function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(t)}}},{key:"update",value:function(e){this.needsUpdate(e.material,e.geometry)}},{key:"needsUpdate",value:function(e,t){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,t.verticesNeedUpdate=!0,t.normalsNeedUpdate=!0,t.colorsNeedUpdate=!0}}},{key:"updateTexture",value:function(e,t,r){return function(n){e[t]=r[n],e.needsUpdate=!0}}}],(r=null)&&n(t.prototype,r),a&&n(t,a),e}()},"./src/js/utils/keyboard.js":(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}r.r(t),r.d(t,{default:()=>o});var a={left:37,up:38,right:39,down:40,space:32,tab:9,escape:27},o=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.domElement=t||document,this.keyCodes={},this.domElement.addEventListener("keydown",(function(e){return r.onKeyChange(e)}),!1),this.domElement.addEventListener("keyup",(function(e){return r.onKeyChange(e)}),!1),window.addEventListener("blur",(function(){return r.onBlur}),!1)}var t,r,o;return t=e,(r=[{key:"destroy",value:function(){var e=this;this.domElement.removeEventListener("keydown",(function(t){return e.onKeyChange(t)}),!1),this.domElement.removeEventListener("keyup",(function(t){return e.onKeyChange(t)}),!1),window.removeEventListener("blur",(function(){return e.onBlur}),!1)}},{key:"onBlur",value:function(){for(var e in this.keyCodes)this.keyCodes[e]=!1}},{key:"onKeyChange",value:function(e){var t=e.keyCode;this.keyCodes[t]="keydown"===e.type}},{key:"pressed",value:function(e){for(var t=e.split("+"),r=0;r<t.length;r++){var n=t[r],o=!1;if(o=-1!=Object.keys(a).indexOf(n)?this.keyCodes[a[n]]:this.keyCodes[n.toUpperCase().charCodeAt(0)],!o)return!1}return!0}},{key:"eventMatches",value:function(e,t){for(var r=a,n=Object.keys(r),o=t.split("+"),i=0;i<o.length;i++){var s=o[i],l=!1;if("shift"===s?l=!!e.shiftKey:"ctrl"===s?l=!!e.ctrlKey:"alt"===s?l=!!e.altKey:"meta"===s?l=!!e.metaKey:-1!==n.indexOf(s)?l=e.keyCode===r[s]:e.keyCode===s.toUpperCase().charCodeAt(0)&&(l=!0),!l)return!1}return!0}}])&&n(t.prototype,r),o&&n(t,o),e}()},"./src/js/utils/orbitControls.js":e=>{e.exports=function(e){var t=e.MOUSE;function r(t){this.object=t,this.target=new e.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25;var r,n,a,o,i,s,l,c,u=this,h=1e-6,d=0,p=0,m=1,f=new e.Vector3,g=!1;this.getPolarAngle=function(){return n},this.getAzimuthalAngle=function(){return r},this.rotateLeft=function(e){p-=e},this.rotateUp=function(e){d-=e},this.panLeft=(a=new e.Vector3,function(e){var t=this.object.matrix.elements;a.set(t[0],t[1],t[2]),a.multiplyScalar(-e),f.add(a)}),this.panUp=function(){var t=new e.Vector3;return function(e){var r=this.object.matrix.elements;t.set(r[4],r[5],r[6]),t.multiplyScalar(e),f.add(t)}}(),this.pan=function(t,r,n,a){if(u.object instanceof e.PerspectiveCamera){var o=u.object.position.clone().sub(u.target).length();o*=Math.tan(u.object.fov/2*Math.PI/180),u.panLeft(2*t*o/a),u.panUp(2*r*o/a)}else u.object instanceof e.OrthographicCamera?(u.panLeft(t*(u.object.right-u.object.left)/n),u.panUp(r*(u.object.top-u.object.bottom)/a)):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.")},this.dollyIn=function(t){u.object instanceof e.PerspectiveCamera?m/=t:u.object instanceof e.OrthographicCamera?(u.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom*t)),u.object.updateProjectionMatrix(),g=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.dollyOut=function(t){u.object instanceof e.PerspectiveCamera?m*=t:u.object instanceof e.OrthographicCamera?(u.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/t)),u.object.updateProjectionMatrix(),g=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.update=(o=new e.Vector3,i=(new e.Quaternion).setFromUnitVectors(t.up,new e.Vector3(0,1,0)),s=i.clone().inverse(),l=new e.Vector3,c=new e.Quaternion,function(){var e=this.object.position;o.copy(e).sub(this.target),o.applyQuaternion(i),r=Math.atan2(o.x,o.z),n=Math.atan2(Math.sqrt(o.x*o.x+o.z*o.z),o.y),r+=p,n+=d,r=Math.max(this.minAzimuthAngle,Math.min(this.maxAzimuthAngle,r)),n=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,n)),n=Math.max(h,Math.min(Math.PI-h,n));var t=o.length()*m;return t=Math.max(this.minDistance,Math.min(this.maxDistance,t)),this.target.add(f),o.x=t*Math.sin(n)*Math.sin(r),o.y=t*Math.cos(n),o.z=t*Math.sin(n)*Math.cos(r),o.applyQuaternion(s),e.copy(this.target).add(o),this.object.lookAt(this.target),!0===this.enableDamping?(p*=1-this.dampingFactor,d*=1-this.dampingFactor):(p=0,d=0),m=1,f.set(0,0,0),!!(g||l.distanceToSquared(this.object.position)>h||8*(1-c.dot(this.object.quaternion))>h)&&(l.copy(this.object.position),c.copy(this.object.quaternion),g=!1,!0)})}function n(t,n){var a=new r(t);this.domElement=void 0!==n?n:document,Object.defineProperty(this,"constraint",{get:function(){return a}}),this.getPolarAngle=function(){return a.getPolarAngle()},this.getAzimuthalAngle=function(){return a.getAzimuthalAngle()},this.enabled=!0,this.center=this.target,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:e.MOUSE.LEFT,ZOOM:e.MOUSE.MIDDLE,PAN:e.MOUSE.RIGHT};var o=this,i=new e.Vector2,s=new e.Vector2,l=new e.Vector2,c=new e.Vector2,u=new e.Vector2,h=new e.Vector2,d=new e.Vector2,p=new e.Vector2,m=new e.Vector2,f=-1,g=0,v=1,b=2,y=3,w=4,L=5,x=f;this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom;var M={type:"change"},E={type:"start"},T={type:"end"};function S(e,t){var r=o.domElement===document?o.domElement.body:o.domElement;a.pan(e,t,r.clientWidth,r.clientHeight)}function R(){return Math.pow(.95,o.zoomSpeed)}function j(e){if(!1!==o.enabled){if(e.preventDefault(),e.button===o.mouseButtons.ORBIT){if(!1===o.enableRotate)return;x=g,i.set(e.clientX,e.clientY)}else if(e.button===o.mouseButtons.ZOOM){if(!1===o.enableZoom)return;x=v,d.set(e.clientX,e.clientY)}else if(e.button===o.mouseButtons.PAN){if(!1===o.enablePan)return;x=b,c.set(e.clientX,e.clientY)}x!==f&&(document.addEventListener("mousemove",A,!1),document.addEventListener("mouseup",C,!1),o.dispatchEvent(E))}}function A(e){if(!1!==o.enabled){e.preventDefault();var t=o.domElement===document?o.domElement.body:o.domElement;if(x===g){if(!1===o.enableRotate)return;s.set(e.clientX,e.clientY),l.subVectors(s,i),a.rotateLeft(2*Math.PI*l.x/t.clientWidth*o.rotateSpeed),a.rotateUp(2*Math.PI*l.y/t.clientHeight*o.rotateSpeed),i.copy(s)}else if(x===v){if(!1===o.enableZoom)return;p.set(e.clientX,e.clientY),m.subVectors(p,d),m.y>0?a.dollyIn(R()):m.y<0&&a.dollyOut(R()),d.copy(p)}else if(x===b){if(!1===o.enablePan)return;u.set(e.clientX,e.clientY),h.subVectors(u,c),S(h.x,h.y),c.copy(u)}x!==f&&o.update()}}function C(){!1!==o.enabled&&(document.removeEventListener("mousemove",A,!1),document.removeEventListener("mouseup",C,!1),o.dispatchEvent(T),x=f)}function P(e){if(!1!==o.enabled&&!1!==o.enableZoom&&x===f){e.preventDefault(),e.stopPropagation();var t=0;void 0!==e.wheelDelta?t=e.wheelDelta:void 0!==e.detail&&(t=-e.detail),t>0?a.dollyOut(R()):t<0&&a.dollyIn(R()),o.update(),o.dispatchEvent(E),o.dispatchEvent(T)}}function F(e){if(!1!==o.enabled&&!1!==o.enableKeys&&!1!==o.enablePan)switch(e.keyCode){case o.keys.UP:S(0,o.keyPanSpeed),o.update();break;case o.keys.BOTTOM:S(0,-o.keyPanSpeed),o.update();break;case o.keys.LEFT:S(o.keyPanSpeed,0),o.update();break;case o.keys.RIGHT:S(-o.keyPanSpeed,0),o.update()}}function _(e){if(!1!==o.enabled){switch(e.touches.length){case 1:if(!1===o.enableRotate)return;x=y,i.set(e.touches[0].pageX,e.touches[0].pageY);break;case 2:if(!1===o.enableZoom)return;x=w;var t=e.touches[0].pageX-e.touches[1].pageX,r=e.touches[0].pageY-e.touches[1].pageY,n=Math.sqrt(t*t+r*r);d.set(0,n);break;case 3:if(!1===o.enablePan)return;x=L,c.set(e.touches[0].pageX,e.touches[0].pageY);break;default:x=f}x!==f&&o.dispatchEvent(E)}}function O(e){if(!1!==o.enabled){e.preventDefault(),e.stopPropagation();var t=o.domElement===document?o.domElement.body:o.domElement;switch(e.touches.length){case 1:if(!1===o.enableRotate)return;if(x!==y)return;s.set(e.touches[0].pageX,e.touches[0].pageY),l.subVectors(s,i),a.rotateLeft(2*Math.PI*l.x/t.clientWidth*o.rotateSpeed),a.rotateUp(2*Math.PI*l.y/t.clientHeight*o.rotateSpeed),i.copy(s),o.update();break;case 2:if(!1===o.enableZoom)return;if(x!==w)return;var r=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,g=Math.sqrt(r*r+n*n);p.set(0,g),m.subVectors(p,d),m.y>0?a.dollyOut(R()):m.y<0&&a.dollyIn(R()),d.copy(p),o.update();break;case 3:if(!1===o.enablePan)return;if(x!==L)return;u.set(e.touches[0].pageX,e.touches[0].pageY),h.subVectors(u,c),S(h.x,h.y),c.copy(u),o.update();break;default:x=f}}}function k(){!1!==o.enabled&&(o.dispatchEvent(T),x=f)}function I(e){e.preventDefault()}this.update=function(){this.autoRotate&&x===f&&a.rotateLeft(2*Math.PI/60/60*o.autoRotateSpeed),!0===a.update()&&this.dispatchEvent(M)},this.reset=function(){x=f,this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(M),this.update()},this.dispose=function(){this.domElement.removeEventListener("contextmenu",I,!1),this.domElement.removeEventListener("mousedown",j,!1),this.domElement.removeEventListener("mousewheel",P,!1),this.domElement.removeEventListener("MozMousePixelScroll",P,!1),this.domElement.removeEventListener("touchstart",_,!1),this.domElement.removeEventListener("touchend",k,!1),this.domElement.removeEventListener("touchmove",O,!1),document.removeEventListener("mousemove",A,!1),document.removeEventListener("mouseup",C,!1),window.removeEventListener("keydown",F,!1)},this.domElement.addEventListener("contextmenu",I,!1),this.domElement.addEventListener("mousedown",j,!1),this.domElement.addEventListener("mousewheel",P,!1),this.domElement.addEventListener("MozMousePixelScroll",P,!1),this.domElement.addEventListener("touchstart",_,!1),this.domElement.addEventListener("touchend",k,!1),this.domElement.addEventListener("touchmove",O,!1),window.addEventListener("keydown",F,!1),this.update()}return t||(t={LEFT:0,MIDDLE:1,RIGHT:2}),n.prototype=Object.create(e.EventDispatcher.prototype),n.prototype.constructor=n,Object.defineProperties(n.prototype,{object:{get:function(){return this.constraint.object}},target:{get:function(){return this.constraint.target},set:function(e){console.warn("THREE.OrbitControls: target is now immutable. Use target.set() instead."),this.constraint.target.copy(e)}},minDistance:{get:function(){return this.constraint.minDistance},set:function(e){this.constraint.minDistance=e}},maxDistance:{get:function(){return this.constraint.maxDistance},set:function(e){this.constraint.maxDistance=e}},minZoom:{get:function(){return this.constraint.minZoom},set:function(e){this.constraint.minZoom=e}},maxZoom:{get:function(){return this.constraint.maxZoom},set:function(e){this.constraint.maxZoom=e}},minPolarAngle:{get:function(){return this.constraint.minPolarAngle},set:function(e){this.constraint.minPolarAngle=e}},maxPolarAngle:{get:function(){return this.constraint.maxPolarAngle},set:function(e){this.constraint.maxPolarAngle=e}},minAzimuthAngle:{get:function(){return this.constraint.minAzimuthAngle},set:function(e){this.constraint.minAzimuthAngle=e}},maxAzimuthAngle:{get:function(){return this.constraint.maxAzimuthAngle},set:function(e){this.constraint.maxAzimuthAngle=e}},enableDamping:{get:function(){return this.constraint.enableDamping},set:function(e){this.constraint.enableDamping=e}},dampingFactor:{get:function(){return this.constraint.dampingFactor},set:function(e){this.constraint.dampingFactor=e}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.constraint.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.constraint.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor=e}}}),n}},"./src/css/app.scss":(e,t,r)=>{"use strict";r.r(t)}},e=>{"use strict";e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,