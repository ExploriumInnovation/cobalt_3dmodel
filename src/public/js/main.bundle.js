/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/app.js":(e,t,o)=>{"use strict";o.r(t);var a=o("./src/js/data/config.js"),n=o("./src/js/utils/detector.js"),r=o("./src/js/app/main.js");o("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),a.default.isDev=!0,function(){if(n.default.webgl){var e=document.getElementById("appContainer");new r.default(e)}else n.default.addGetWebGLMessage()}()},"./src/js/app/controls/OrbitControls.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{OrbitControls:()=>n,MapControls:()=>r});var a=o("./node_modules/three/build/three.module.js"),n=function(e,t){var o,n,r,i,s,c;void 0===t&&console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),t===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),this.object=e,this.domElement=t,this.enabled=!0,this.target=new a.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={LEFT:a.MOUSE.ROTATE,MIDDLE:a.MOUSE.DOLLY,RIGHT:a.MOUSE.PAN},this.touches={ONE:a.TOUCH.ROTATE,TWO:a.TOUCH.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return g.phi},this.getAzimuthalAngle=function(){return g.theta},this.listenToKeyEvents=function(e){e.addEventListener("keydown",J),this._domElementKeyEvents=e},this.saveState=function(){l.target0.copy(l.target),l.position0.copy(l.object.position),l.zoom0=l.object.zoom},this.reset=function(){l.target.copy(l.target0),l.object.position.copy(l.position0),l.object.zoom=l.zoom0,l.object.updateProjectionMatrix(),l.dispatchEvent(h),l.update(),m=d.NONE},this.update=(o=new a.Vector3,n=(new a.Quaternion).setFromUnitVectors(e.up,new a.Vector3(0,1,0)),r=n.clone().invert(),i=new a.Vector3,s=new a.Quaternion,c=2*Math.PI,function(){var e=l.object.position;o.copy(e).sub(l.target),o.applyQuaternion(n),g.setFromVector3(o),l.autoRotate&&m===d.NONE&&k(2*Math.PI/60/60*l.autoRotateSpeed),l.enableDamping?(g.theta+=b.theta*l.dampingFactor,g.phi+=b.phi*l.dampingFactor):(g.theta+=b.theta,g.phi+=b.phi);var t=l.minAzimuthAngle,a=l.maxAzimuthAngle;return isFinite(t)&&isFinite(a)&&(t<-Math.PI?t+=c:t>Math.PI&&(t-=c),a<-Math.PI?a+=c:a>Math.PI&&(a-=c),g.theta=t<=a?Math.max(t,Math.min(a,g.theta)):g.theta>(t+a)/2?Math.max(t,g.theta):Math.min(a,g.theta)),g.phi=Math.max(l.minPolarAngle,Math.min(l.maxPolarAngle,g.phi)),g.makeSafe(),g.radius*=v,g.radius=Math.max(l.minDistance,Math.min(l.maxDistance,g.radius)),!0===l.enableDamping?l.target.addScaledVector(w,l.dampingFactor):l.target.add(w),o.setFromSpherical(g),o.applyQuaternion(r),e.copy(l.target).add(o),l.object.lookAt(l.target),!0===l.enableDamping?(b.theta*=1-l.dampingFactor,b.phi*=1-l.dampingFactor,w.multiplyScalar(1-l.dampingFactor)):(b.set(0,0,0),w.set(0,0,0)),v=1,!!(y||i.distanceToSquared(l.object.position)>f||8*(1-s.dot(l.object.quaternion))>f)&&(l.dispatchEvent(h),i.copy(l.object.position),s.copy(l.object.quaternion),y=!1,!0)}),this.dispose=function(){l.domElement.removeEventListener("contextmenu",te),l.domElement.removeEventListener("pointerdown",X),l.domElement.removeEventListener("wheel",q),l.domElement.removeEventListener("touchstart",Q),l.domElement.removeEventListener("touchend",ee),l.domElement.removeEventListener("touchmove",$),l.domElement.ownerDocument.removeEventListener("pointermove",Z),l.domElement.ownerDocument.removeEventListener("pointerup",K),null!==l._domElementKeyEvents&&l._domElementKeyEvents.removeEventListener("keydown",J)};var l=this,h={type:"change"},u={type:"start"},p={type:"end"},d={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},m=d.NONE,f=1e-6,g=new a.Spherical,b=new a.Spherical,v=1,w=new a.Vector3,y=!1,E=new a.Vector2,j=new a.Vector2,O=new a.Vector2,L=new a.Vector2,x=new a.Vector2,M=new a.Vector2,T=new a.Vector2,P=new a.Vector2,A=new a.Vector2;function C(){return Math.pow(.95,l.zoomSpeed)}function k(e){b.theta-=e}function V(e){b.phi-=e}var N,S=(N=new a.Vector3,function(e,t){N.setFromMatrixColumn(t,0),N.multiplyScalar(-e),w.add(N)}),F=function(){var e=new a.Vector3;return function(t,o){!0===l.screenSpacePanning?e.setFromMatrixColumn(o,1):(e.setFromMatrixColumn(o,0),e.crossVectors(l.object.up,e)),e.multiplyScalar(t),w.add(e)}}(),R=function(){var e=new a.Vector3;return function(t,o){var a=l.domElement;if(l.object.isPerspectiveCamera){var n=l.object.position;e.copy(n).sub(l.target);var r=e.length();r*=Math.tan(l.object.fov/2*Math.PI/180),S(2*t*r/a.clientHeight,l.object.matrix),F(2*o*r/a.clientHeight,l.object.matrix)}else l.object.isOrthographicCamera?(S(t*(l.object.right-l.object.left)/l.object.zoom/a.clientWidth,l.object.matrix),F(o*(l.object.top-l.object.bottom)/l.object.zoom/a.clientHeight,l.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),l.enablePan=!1)}}();function _(e){l.object.isPerspectiveCamera?v/=e:l.object.isOrthographicCamera?(l.object.zoom=Math.max(l.minZoom,Math.min(l.maxZoom,l.object.zoom*e)),l.object.updateProjectionMatrix(),y=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),l.enableZoom=!1)}function z(e){l.object.isPerspectiveCamera?v*=e:l.object.isOrthographicCamera?(l.object.zoom=Math.max(l.minZoom,Math.min(l.maxZoom,l.object.zoom/e)),l.object.updateProjectionMatrix(),y=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),l.enableZoom=!1)}function D(e){E.set(e.clientX,e.clientY)}function I(e){L.set(e.clientX,e.clientY)}function U(e){if(1==e.touches.length)E.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),o=.5*(e.touches[0].pageY+e.touches[1].pageY);E.set(t,o)}}function H(e){if(1==e.touches.length)L.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),o=.5*(e.touches[0].pageY+e.touches[1].pageY);L.set(t,o)}}function Y(e){var t=e.touches[0].pageX-e.touches[1].pageX,o=e.touches[0].pageY-e.touches[1].pageY,a=Math.sqrt(t*t+o*o);T.set(0,a)}function G(e){if(1==e.touches.length)j.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),o=.5*(e.touches[0].pageY+e.touches[1].pageY);j.set(t,o)}O.subVectors(j,E).multiplyScalar(l.rotateSpeed);var a=l.domElement;k(2*Math.PI*O.x/a.clientHeight),V(2*Math.PI*O.y/a.clientHeight),E.copy(j)}function B(e){if(1==e.touches.length)x.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),o=.5*(e.touches[0].pageY+e.touches[1].pageY);x.set(t,o)}M.subVectors(x,L).multiplyScalar(l.panSpeed),R(M.x,M.y),L.copy(x)}function W(e){var t=e.touches[0].pageX-e.touches[1].pageX,o=e.touches[0].pageY-e.touches[1].pageY,a=Math.sqrt(t*t+o*o);P.set(0,a),A.set(0,Math.pow(P.y/T.y,l.zoomSpeed)),_(A.y),T.copy(P)}function X(e){if(!1!==l.enabled)switch(e.pointerType){case"mouse":case"pen":!function(e){var t;switch(e.preventDefault(),l.domElement.focus?l.domElement.focus():window.focus(),e.button){case 0:t=l.mouseButtons.LEFT;break;case 1:t=l.mouseButtons.MIDDLE;break;case 2:t=l.mouseButtons.RIGHT;break;default:t=-1}switch(t){case a.MOUSE.DOLLY:if(!1===l.enableZoom)return;!function(e){T.set(e.clientX,e.clientY)}(e),m=d.DOLLY;break;case a.MOUSE.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===l.enablePan)return;I(e),m=d.PAN}else{if(!1===l.enableRotate)return;D(e),m=d.ROTATE}break;case a.MOUSE.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===l.enableRotate)return;D(e),m=d.ROTATE}else{if(!1===l.enablePan)return;I(e),m=d.PAN}break;default:m=d.NONE}m!==d.NONE&&(l.domElement.ownerDocument.addEventListener("pointermove",Z),l.domElement.ownerDocument.addEventListener("pointerup",K),l.dispatchEvent(u))}(e)}}function Z(e){if(!1!==l.enabled)switch(e.pointerType){case"mouse":case"pen":!function(e){if(!1===l.enabled)return;switch(e.preventDefault(),m){case d.ROTATE:if(!1===l.enableRotate)return;!function(e){j.set(e.clientX,e.clientY),O.subVectors(j,E).multiplyScalar(l.rotateSpeed);var t=l.domElement;k(2*Math.PI*O.x/t.clientHeight),V(2*Math.PI*O.y/t.clientHeight),E.copy(j),l.update()}(e);break;case d.DOLLY:if(!1===l.enableZoom)return;!function(e){P.set(e.clientX,e.clientY),A.subVectors(P,T),A.y>0?_(C()):A.y<0&&z(C()),T.copy(P),l.update()}(e);break;case d.PAN:if(!1===l.enablePan)return;!function(e){x.set(e.clientX,e.clientY),M.subVectors(x,L).multiplyScalar(l.panSpeed),R(M.x,M.y),L.copy(x),l.update()}(e)}}(e)}}function K(e){switch(e.pointerType){case"mouse":case"pen":!function(e){if(l.domElement.ownerDocument.removeEventListener("pointermove",Z),l.domElement.ownerDocument.removeEventListener("pointerup",K),!1===l.enabled)return;l.dispatchEvent(p),m=d.NONE}()}}function q(e){!1===l.enabled||!1===l.enableZoom||m!==d.NONE&&m!==d.ROTATE||(e.preventDefault(),e.stopPropagation(),l.dispatchEvent(u),function(e){e.deltaY<0?z(C()):e.deltaY>0&&_(C()),l.update()}(e),l.dispatchEvent(p))}function J(e){!1!==l.enabled&&!1!==l.enablePan&&function(e){var t=!1;switch(e.keyCode){case l.keys.UP:R(0,l.keyPanSpeed),t=!0;break;case l.keys.BOTTOM:R(0,-l.keyPanSpeed),t=!0;break;case l.keys.LEFT:R(l.keyPanSpeed,0),t=!0;break;case l.keys.RIGHT:R(-l.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),l.update())}(e)}function Q(e){if(!1!==l.enabled){switch(e.preventDefault(),e.touches.length){case 1:switch(l.touches.ONE){case a.TOUCH.ROTATE:if(!1===l.enableRotate)return;U(e),m=d.TOUCH_ROTATE;break;case a.TOUCH.PAN:if(!1===l.enablePan)return;H(e),m=d.TOUCH_PAN;break;default:m=d.NONE}break;case 2:switch(l.touches.TWO){case a.TOUCH.DOLLY_PAN:if(!1===l.enableZoom&&!1===l.enablePan)return;!function(e){l.enableZoom&&Y(e),l.enablePan&&H(e)}(e),m=d.TOUCH_DOLLY_PAN;break;case a.TOUCH.DOLLY_ROTATE:if(!1===l.enableZoom&&!1===l.enableRotate)return;!function(e){l.enableZoom&&Y(e),l.enableRotate&&U(e)}(e),m=d.TOUCH_DOLLY_ROTATE;break;default:m=d.NONE}break;default:m=d.NONE}m!==d.NONE&&l.dispatchEvent(u)}}function $(e){if(!1!==l.enabled)switch(e.preventDefault(),e.stopPropagation(),m){case d.TOUCH_ROTATE:if(!1===l.enableRotate)return;G(e),l.update();break;case d.TOUCH_PAN:if(!1===l.enablePan)return;B(e),l.update();break;case d.TOUCH_DOLLY_PAN:if(!1===l.enableZoom&&!1===l.enablePan)return;!function(e){l.enableZoom&&W(e),l.enablePan&&B(e)}(e),l.update();break;case d.TOUCH_DOLLY_ROTATE:if(!1===l.enableZoom&&!1===l.enableRotate)return;!function(e){l.enableZoom&&W(e),l.enableRotate&&G(e)}(e),l.update();break;default:m=d.NONE}}function ee(e){!1!==l.enabled&&(l.dispatchEvent(p),m=d.NONE)}function te(e){!1!==l.enabled&&e.preventDefault()}l.domElement.addEventListener("contextmenu",te),l.domElement.addEventListener("pointerdown",X),l.domElement.addEventListener("wheel",q),l.domElement.addEventListener("touchstart",Q),l.domElement.addEventListener("touchend",ee),l.domElement.addEventListener("touchmove",$),this.update()};n.prototype=Object.create(a.EventDispatcher.prototype),n.prototype.constructor=n;var r=function(e,t){n.call(this,e,t),this.screenSpacePanning=!1,this.mouseButtons.LEFT=a.MOUSE.PAN,this.mouseButtons.RIGHT=a.MOUSE.ROTATE,this.touches.ONE=a.TOUCH.PAN,this.touches.TWO=a.TOUCH.DOLLY_ROTATE};r.prototype=Object.create(a.EventDispatcher.prototype),r.prototype.constructor=r},"./src/js/app/loaders/MTLLoader.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{MTLLoader:()=>n});var a=o("./node_modules/three/build/three.module.js"),n=function(e){a.Loader.call(this,e)};n.prototype=Object.assign(Object.create(a.Loader.prototype),{constructor:n,load:function(e,t,o,n){var r=this,i=""===this.path?a.LoaderUtils.extractUrlBase(e):this.path,s=new a.FileLoader(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(e,(function(o){try{t(r.parse(o,i))}catch(t){n?n(t):console.error(t),r.manager.itemError(e)}}),o,n)},setMaterialOptions:function(e){return this.materialOptions=e,this},parse:function(e,t){for(var o=e.split("\n"),a={},r=/\s+/,i={},s=0;s<o.length;s++){var c=o[s];if(0!==(c=c.trim()).length&&"#"!==c.charAt(0)){var l=c.indexOf(" "),h=l>=0?c.substring(0,l):c;h=h.toLowerCase();var u=l>=0?c.substring(l+1):"";if(u=u.trim(),"newmtl"===h)a={name:u},i[u]=a;else if("ka"===h||"kd"===h||"ks"===h||"ke"===h){var p=u.split(r,3);a[h]=[parseFloat(p[0]),parseFloat(p[1]),parseFloat(p[2])]}else a[h]=u}}var d=new n.MaterialCreator(this.resourcePath||t,this.materialOptions);return d.setCrossOrigin(this.crossOrigin),d.setManager(this.manager),d.setMaterials(i),d}}),n.MaterialCreator=function(e,t){this.baseUrl=e||"",this.options=t,this.materialsInfo={},this.materials={},this.materialsArray=[],this.nameLookup={},this.side=this.options&&this.options.side?this.options.side:a.FrontSide,this.wrap=this.options&&this.options.wrap?this.options.wrap:a.RepeatWrapping},n.MaterialCreator.prototype={constructor:n.MaterialCreator,crossOrigin:"anonymous",setCrossOrigin:function(e){return this.crossOrigin=e,this},setManager:function(e){this.manager=e},setMaterials:function(e){this.materialsInfo=this.convert(e),this.materials={},this.materialsArray=[],this.nameLookup={}},convert:function(e){if(!this.options)return e;var t={};for(var o in e){var a=e[o],n={};for(var r in t[o]=n,a){var i=!0,s=a[r],c=r.toLowerCase();switch(c){case"kd":case"ka":case"ks":this.options&&this.options.normalizeRGB&&(s=[s[0]/255,s[1]/255,s[2]/255]),this.options&&this.options.ignoreZeroRGBs&&0===s[0]&&0===s[1]&&0===s[2]&&(i=!1)}i&&(n[c]=s)}}return t},preload:function(){for(var e in this.materialsInfo)this.create(e)},getIndex:function(e){return this.nameLookup[e]},getAsArray:function(){var e=0;for(var t in this.materialsInfo)this.materialsArray[e]=this.create(t),this.nameLookup[t]=e,e++;return this.materialsArray},create:function(e){return void 0===this.materials[e]&&this.createMaterial_(e),this.materials[e]},createMaterial_:function(e){var t=this,o=this.materialsInfo[e],n={name:e,side:this.side};function r(e,o){if(!n[e]){var a,r,i=t.getTextureParams(o,n),s=t.loadTexture((a=t.baseUrl,"string"!=typeof(r=i.url)||""===r?"":/^https?:\/\//i.test(r)?r:a+r));s.repeat.copy(i.scale),s.offset.copy(i.offset),s.wrapS=t.wrap,s.wrapT=t.wrap,n[e]=s}}for(var i in o){var s,c=o[i];if(""!==c)switch(i.toLowerCase()){case"kd":n.color=(new a.Color).fromArray(c);break;case"ks":n.specular=(new a.Color).fromArray(c);break;case"ke":n.emissive=(new a.Color).fromArray(c);break;case"map_kd":r("map",c);break;case"map_ks":r("specularMap",c);break;case"map_ke":r("emissiveMap",c);break;case"norm":r("normalMap",c);break;case"map_bump":case"bump":r("bumpMap",c);break;case"map_d":r("alphaMap",c),n.transparent=!0;break;case"ns":n.shininess=parseFloat(c);break;case"d":(s=parseFloat(c))<1&&(n.opacity=s,n.transparent=!0);break;case"tr":s=parseFloat(c),this.options&&this.options.invertTrProperty&&(s=1-s),s>0&&(n.opacity=1-s,n.transparent=!0)}}return this.materials[e]=new a.MeshPhongMaterial(n),this.materials[e]},getTextureParams:function(e,t){var o,n={scale:new a.Vector2(1,1),offset:new a.Vector2(0,0)},r=e.split(/\s+/);return(o=r.indexOf("-bm"))>=0&&(t.bumpScale=parseFloat(r[o+1]),r.splice(o,2)),(o=r.indexOf("-s"))>=0&&(n.scale.set(parseFloat(r[o+1]),parseFloat(r[o+2])),r.splice(o,4)),(o=r.indexOf("-o"))>=0&&(n.offset.set(parseFloat(r[o+1]),parseFloat(r[o+2])),r.splice(o,4)),n.url=r.join(" ").trim(),n},loadTexture:function(e,t,o,n,r){var i,s=void 0!==this.manager?this.manager:a.DefaultLoadingManager,c=s.getHandler(e);return null===c&&(c=new a.TextureLoader(s)),c.setCrossOrigin&&c.setCrossOrigin(this.crossOrigin),i=c.load(e,o,n,r),void 0!==t&&(i.mapping=t),i}}},"./src/js/app/loaders/OBJLoader.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{OBJLoader:()=>n});var a=o("./node_modules/three/build/three.module.js"),n=function(){var e=/^[og]\s*(.+)?/,t=/^mtllib /,o=/^usemtl /,n=/^usemap /,r=new a.Vector3,i=new a.Vector3,s=new a.Vector3,c=new a.Vector3,l=new a.Vector3;function h(){var e={objects:[],object:{},vertices:[],normals:[],colors:[],uvs:[],materials:{},materialLibraries:[],startObject:function(e,t){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=e,void(this.object.fromDeclaration=!1!==t);var o=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:e||"",fromDeclaration:!1!==t,geometry:{vertices:[],normals:[],colors:[],uvs:[],hasUVIndices:!1},materials:[],smooth:!0,startMaterial:function(e,t){var o=this._finalize(!1);o&&(o.inherited||o.groupCount<=0)&&this.materials.splice(o.index,1);var a={index:this.materials.length,name:e||"",mtllib:Array.isArray(t)&&t.length>0?t[t.length-1]:"",smooth:void 0!==o?o.smooth:this.smooth,groupStart:void 0!==o?o.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(e){var t={index:"number"==typeof e?e:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return t.clone=this.clone.bind(t),t}};return this.materials.push(a),a},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(e){var t=this.currentMaterial();if(t&&-1===t.groupEnd&&(t.groupEnd=this.geometry.vertices.length/3,t.groupCount=t.groupEnd-t.groupStart,t.inherited=!1),e&&this.materials.length>1)for(var o=this.materials.length-1;o>=0;o--)this.materials[o].groupCount<=0&&this.materials.splice(o,1);return e&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),t}},o&&o.name&&"function"==typeof o.clone){var a=o.clone(0);a.inherited=!0,this.object.materials.push(a)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(e,t){var o=parseInt(e,10);return 3*(o>=0?o-1:o+t/3)},parseNormalIndex:function(e,t){var o=parseInt(e,10);return 3*(o>=0?o-1:o+t/3)},parseUVIndex:function(e,t){var o=parseInt(e,10);return 2*(o>=0?o-1:o+t/2)},addVertex:function(e,t,o){var a=this.vertices,n=this.object.geometry.vertices;n.push(a[e+0],a[e+1],a[e+2]),n.push(a[t+0],a[t+1],a[t+2]),n.push(a[o+0],a[o+1],a[o+2])},addVertexPoint:function(e){var t=this.vertices;this.object.geometry.vertices.push(t[e+0],t[e+1],t[e+2])},addVertexLine:function(e){var t=this.vertices;this.object.geometry.vertices.push(t[e+0],t[e+1],t[e+2])},addNormal:function(e,t,o){var a=this.normals,n=this.object.geometry.normals;n.push(a[e+0],a[e+1],a[e+2]),n.push(a[t+0],a[t+1],a[t+2]),n.push(a[o+0],a[o+1],a[o+2])},addFaceNormal:function(e,t,o){var a=this.vertices,n=this.object.geometry.normals;r.fromArray(a,e),i.fromArray(a,t),s.fromArray(a,o),l.subVectors(s,i),c.subVectors(r,i),l.cross(c),l.normalize(),n.push(l.x,l.y,l.z),n.push(l.x,l.y,l.z),n.push(l.x,l.y,l.z)},addColor:function(e,t,o){var a=this.colors,n=this.object.geometry.colors;void 0!==a[e]&&n.push(a[e+0],a[e+1],a[e+2]),void 0!==a[t]&&n.push(a[t+0],a[t+1],a[t+2]),void 0!==a[o]&&n.push(a[o+0],a[o+1],a[o+2])},addUV:function(e,t,o){var a=this.uvs,n=this.object.geometry.uvs;n.push(a[e+0],a[e+1]),n.push(a[t+0],a[t+1]),n.push(a[o+0],a[o+1])},addDefaultUV:function(){var e=this.object.geometry.uvs;e.push(0,0),e.push(0,0),e.push(0,0)},addUVLine:function(e){var t=this.uvs;this.object.geometry.uvs.push(t[e+0],t[e+1])},addFace:function(e,t,o,a,n,r,i,s,c){var l=this.vertices.length,h=this.parseVertexIndex(e,l),u=this.parseVertexIndex(t,l),p=this.parseVertexIndex(o,l);if(this.addVertex(h,u,p),this.addColor(h,u,p),void 0!==i&&""!==i){var d=this.normals.length;h=this.parseNormalIndex(i,d),u=this.parseNormalIndex(s,d),p=this.parseNormalIndex(c,d),this.addNormal(h,u,p)}else this.addFaceNormal(h,u,p);if(void 0!==a&&""!==a){var m=this.uvs.length;h=this.parseUVIndex(a,m),u=this.parseUVIndex(n,m),p=this.parseUVIndex(r,m),this.addUV(h,u,p),this.object.geometry.hasUVIndices=!0}else this.addDefaultUV()},addPointGeometry:function(e){this.object.geometry.type="Points";for(var t=this.vertices.length,o=0,a=e.length;o<a;o++){var n=this.parseVertexIndex(e[o],t);this.addVertexPoint(n),this.addColor(n)}},addLineGeometry:function(e,t){this.object.geometry.type="Line";for(var o=this.vertices.length,a=this.uvs.length,n=0,r=e.length;n<r;n++)this.addVertexLine(this.parseVertexIndex(e[n],o));var i=0;for(r=t.length;i<r;i++)this.addUVLine(this.parseUVIndex(t[i],a))}};return e.startObject("",!1),e}function u(e){a.Loader.call(this,e),this.materials=null}return u.prototype=Object.assign(Object.create(a.Loader.prototype),{constructor:u,load:function(e,t,o,n){var r=this,i=new a.FileLoader(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(e,(function(o){try{t(r.parse(o))}catch(t){n?n(t):console.error(t),r.manager.itemError(e)}}),o,n)},setMaterials:function(e){return this.materials=e,this},parse:function(r){var i=new h;-1!==r.indexOf("\r\n")&&(r=r.replace(/\r\n/g,"\n")),-1!==r.indexOf("\\\n")&&(r=r.replace(/\\\n/g,""));for(var s=r.split("\n"),c="",l="",u=[],p="function"==typeof"".trimLeft,d=0,m=s.length;d<m;d++)if(c=s[d],0!==(c=p?c.trimLeft():c.trim()).length&&"#"!==(l=c.charAt(0)))if("v"===l){var f=c.split(/\s+/);switch(f[0]){case"v":i.vertices.push(parseFloat(f[1]),parseFloat(f[2]),parseFloat(f[3])),f.length>=7?i.colors.push(parseFloat(f[4]),parseFloat(f[5]),parseFloat(f[6])):i.colors.push(void 0,void 0,void 0);break;case"vn":i.normals.push(parseFloat(f[1]),parseFloat(f[2]),parseFloat(f[3]));break;case"vt":i.uvs.push(parseFloat(f[1]),parseFloat(f[2]))}}else if("f"===l){for(var g=c.substr(1).trim().split(/\s+/),b=[],v=0,w=g.length;v<w;v++){var y=g[v];if(y.length>0){var E=y.split("/");b.push(E)}}var j=b[0];for(v=1,w=b.length-1;v<w;v++){var O=b[v],L=b[v+1];i.addFace(j[0],O[0],L[0],j[1],O[1],L[1],j[2],O[2],L[2])}}else if("l"===l){var x=c.substring(1).trim().split(" "),M=[],T=[];if(-1===c.indexOf("/"))M=x;else for(var P=0,A=x.length;P<A;P++){var C=x[P].split("/");""!==C[0]&&M.push(C[0]),""!==C[1]&&T.push(C[1])}i.addLineGeometry(M,T)}else if("p"===l){var k=c.substr(1).trim().split(" ");i.addPointGeometry(k)}else if(null!==(u=e.exec(c))){var V=(" "+u[0].substr(1).trim()).substr(1);i.startObject(V)}else if(o.test(c))i.object.startMaterial(c.substring(7).trim(),i.materialLibraries);else if(t.test(c))i.materialLibraries.push(c.substring(7).trim());else if(n.test(c))console.warn('THREE.OBJLoader: Rendering identifier "usemap" not supported. Textures must be defined in MTL files.');else if("s"===l){if((u=c.split(" ")).length>1){var N=u[1].trim().toLowerCase();i.object.smooth="0"!==N&&"off"!==N}else i.object.smooth=!0;(W=i.object.currentMaterial())&&(W.smooth=i.object.smooth)}else{if("\0"===c)continue;console.warn('THREE.OBJLoader: Unexpected line: "'+c+'"')}i.finalize();var S=new a.Group;if(S.materialLibraries=[].concat(i.materialLibraries),!0===!(1===i.objects.length&&0===i.objects[0].geometry.vertices.length))for(d=0,m=i.objects.length;d<m;d++){var F=i.objects[d],R=F.geometry,_=F.materials,z="Line"===R.type,D="Points"===R.type,I=!1;if(0!==R.vertices.length){(q=new a.BufferGeometry).setAttribute("position",new a.Float32BufferAttribute(R.vertices,3)),R.normals.length>0&&q.setAttribute("normal",new a.Float32BufferAttribute(R.normals,3)),R.colors.length>0&&(I=!0,q.setAttribute("color",new a.Float32BufferAttribute(R.colors,3))),!0===R.hasUVIndices&&q.setAttribute("uv",new a.Float32BufferAttribute(R.uvs,2));for(var U,H=[],Y=0,G=_.length;Y<G;Y++){var B=(K=_[Y]).name+"_"+K.smooth+"_"+I,W=i.materials[B];if(null!==this.materials)if(W=this.materials.create(K.name),!z||!W||W instanceof a.LineBasicMaterial){if(D&&W&&!(W instanceof a.PointsMaterial)){var X=new a.PointsMaterial({size:10,sizeAttenuation:!1});a.Material.prototype.copy.call(X,W),X.color.copy(W.color),X.map=W.map,W=X}}else{var Z=new a.LineBasicMaterial;a.Material.prototype.copy.call(Z,W),Z.color.copy(W.color),W=Z}void 0===W&&((W=z?new a.LineBasicMaterial:D?new a.PointsMaterial({size:1,sizeAttenuation:!1}):new a.MeshPhongMaterial).name=K.name,W.flatShading=!K.smooth,W.vertexColors=I,i.materials[B]=W),H.push(W)}if(H.length>1){for(Y=0,G=_.length;Y<G;Y++){var K=_[Y];q.addGroup(K.groupStart,K.groupCount,Y)}U=z?new a.LineSegments(q,H):D?new a.Points(q,H):new a.Mesh(q,H)}else U=z?new a.LineSegments(q,H[0]):D?new a.Points(q,H[0]):new a.Mesh(q,H[0]);U.name=F.name,S.add(U)}}else if(i.vertices.length>0){var q;W=new a.PointsMaterial({size:1,sizeAttenuation:!1});(q=new a.BufferGeometry).setAttribute("position",new a.Float32BufferAttribute(i.vertices,3)),i.colors.length>0&&void 0!==i.colors[0]&&(q.setAttribute("color",new a.Float32BufferAttribute(i.colors,3)),W.vertexColors=!0);var J=new a.Points(q,W);S.add(J)}return S}}),u}()},"./src/js/app/main.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>c});var a=o("./node_modules/three/build/three.module.js"),n=o("./src/js/app/controls/OrbitControls.js"),r=o("./src/js/app/loaders/OBJLoader.js"),i=o("./src/js/app/loaders/MTLLoader.js");function s(e){return"string"==typeof e&&e?e.split("&").reduce((function(e,t){var o,a,n,r=t.split("=");return Object.assign((o={},a=r[0],n=r[1],a in o?Object.defineProperty(o,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):o[a]=n,o),e)}),{}):e}var c=function e(t){var o,c,l,h;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t;var u="VCOE2100080-S3R1_0",p=s(window.location.search.replace(/^\?/,""));function d(){o.setSize(window.innerWidth,window.innerHeight),l.aspect=window.innerWidth/window.innerHeight,l.updateProjectionMatrix(),m()}function m(){o.render(c,l)}p.model&&(u=p.model),function(){(o=new a.WebGLRenderer({antialias:!0,alpha:!0})).setClearColor("#B8B8B8",1),o.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(o.domElement),o.outputEncoding=a.sRGBEncoding,c=new a.Scene,(l=new a.PerspectiveCamera(40,window.innerWidth/window.innerHeight,1,2e4)).position.set(-10,0,23),c.add(l);var e=new a.LoadingManager((function(){console.log("object1:",h),function(e){e.updateMatrixWorld();var t=(new a.Box3).setFromObject(e),o=(t.getSize(new a.Vector3).length(),t.getSize()),n=t.getCenter(new a.Vector3);e.position.x+=e.position.x-n.x,e.position.y+=e.position.y-n.y,e.position.z+=e.position.z-n.z,l.position.copy(n),o.x>o.y?l.position.z=-.5*-o.x:l.position.z=3*o.y,l.lookAt(0,0,0)}(h),c.add(h)}));function t(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log("model "+Math.round(t,2)+"% downloaded")}}function s(){}e.onProgress=function(e,t,o){console.log(e,t,o)};var p=new n.OrbitControls(l,o.domElement);p.addEventListener("change",m),p.minDistance=100,p.maxDistance=500,p.enablePan=!0,p.enableDamping=!0;var f=new a.PointLight(16777215,.1);l.add(f);var g=new a.AmbientLight(16777215,.8);g.position.x=300,g.position.y=300,g.position.z=0,c.add(g);var b=new i.MTLLoader(e),v=new r.OBJLoader(e);b.setPath("https://liyang-assets.explorium.cn/3d/VCOE2100080-S3R1/").load("".concat(u,".mtl"),(function(e){e.preload(),v.setMaterials(e),console.log("111"),v.load("https://liyang-assets.explorium.cn/3d/VCOE2100080-S3R1/".concat(u,".obj"),(function(e){console.log("222"),h=e}),t,s)})),window.addEventListener("resize",d)}(),function e(){requestAnimationFrame(e),m()}()}},"./src/js/data/config.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>a});const a={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:o("./node_modules/@tweenjs/tween.js/dist/tween.esm.js").default.Easing.Quadratic.InOut,duration:500,model:{selected:0,initialTypes:["gltf","object"],type:"gltf"},models:[{path:"./assets/models/duck.gltf",scale:20,type:"gltf"},{path:"./assets/models/Teapot.json",scale:20,type:"object"}],texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!0,wireframe:!1,translucent:!1,material:{color:16777215,emissive:16777215}},fog:{color:16777215,near:8e-4},camera:{fov:40,near:2,far:1e3,aspect:1,posX:0,posY:30,posZ:40},controls:{autoRotate:!0,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:200,maxDistance:600,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/2,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}}},"./src/js/utils/detector.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>a});const a={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,o,a;t=void 0!==(e=e||{}).parent?e.parent:document.body,o=void 0!==e.id?e.id:"oldie",(a=this.getWebGLErrorMessage()).id=o,t.appendChild(a)}}},"./src/css/app.scss":(e,t,o)=>{"use strict";o.r(t)}},e=>{"use strict";e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,